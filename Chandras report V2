import pandas as pd
import pyodbc
from sqlalchemy import create_engine
import numpy as np
import os
import re

# --- 0. Configuration Variables ---
# NOTE: Your connection details must be defined here.
# Assuming you have defined these variables elsewhere, like:
# server = '105.52.12.164,1433'
# USERNAME = 'rfuseradmin'
# PSSWD = 'Newtisgreat!'
# DB = 'RANCOMM'

# Define the ne_type values and their correct report names
CDU30_TYPE = 'macro_indoor_dist'
UADPF_TYPE = 'udu_cnf'
# ðŸš¨ ACTION REQUIRED: Replace 'nsb_type' with the actual ne_type for NSB sites
NSB_TYPE = 'nsb_type' 
NE_TYPES_FILTER = [CDU30_TYPE, UADPF_TYPE, NSB_TYPE]

# Define the file path for the output
OUTPUT_FILE = r'C:\Users\l5.lopez\Downloads\00_to delete\raw_data.csv'
CHUNK_SIZE = 50000  # Number of rows to process in memory at a time
# ----------------------------------

# --- 1. Database Connection and Query Setup ---

# Configure the connection string and engine
# The 'server' variable must be defined in your environment/script for this to work
server_tcp = 'tcp:' + server 
connection_string = f'DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={server_tcp};DATABASE={DB};Encrypt=yes;TrustServerCertificate=yes;UID={USERNAME};PWD={PSSWD}'
engine = create_engine(f'mssql+pyodbc:///?odbc_connect={connection_string}', fast_executemany=True)

# --------------------------------------------------------------------------
# 2. SQL QUERIES (SIMPLIFIED FOR SINGLE-KEY MERGE)
# --------------------------------------------------------------------------

# 2a. Query for the main site mapping data (M)
MAIN_DATA_QUERY = f"""
SELECT
    M.[market_id],
    M.[NE_ID],
    M.[ne_type],
    M.[NE NAME],
    M.[region]
FROM [RANCOMM].[dbo].[daily_sites_mapping] M
WHERE 
    M.ne_type IN ('{CDU30_TYPE}', '{UADPF_TYPE}', '{NSB_TYPE}')
"""

# 2b. Query for the OVData LOOKUP TABLE 
# Selecting the P_ENB_ID (the key) and P:Project Site Type (the value)
OV_LOOKUP_QUERY = """
SELECT 
    [P_ENB_ID],             
    [P:Project Site Type]
FROM [RANCOMM].[dbo].[OVData]
"""

# --------------------------------------------------------------------------
# 3. Memory-Efficient Processing
# --------------------------------------------------------------------------

header_written = False
sc_conditions = [
    'sc_od', 'sc_ib', 'das_od', 'das_ib', 'cran_das', 
    'ib', 'das', 'sc', 'odas' 
]

print(f"Starting memory-efficient process. Output: {OUTPUT_FILE}")
print(f"1. Fetching small OVData lookup table...")

# Load the small OVData lookup table ONCE
try:
    df_ov_lookup = pd.read_sql(OV_LOOKUP_QUERY, engine)
    print(f"   Successfully loaded {len(df_ov_lookup)} records for lookup. âœ…")
    
    # ðŸ’¡ FIX 1: Rename the descriptive column to ensure we get the text value
    # We rename the column here to ensure it's captured correctly during the merge.
    df_ov_lookup.rename(columns={'P:Project Site Type': 'Project_Description_Value'}, inplace=True)
    
    # ðŸ’¡ FIX 2: Force the merge key to be a string type to avoid 'float64' error
    df_ov_lookup['P_ENB_ID'] = df_ov_lookup['P_ENB_ID'].astype(str)
    
    print("   Data type correction and renaming applied to lookup table. âœ…")

except Exception as e:
    print(f"FATAL ERROR: Could not load OVData lookup table. Verify column name [P_ENB_ID] and connection: {e}")
    exit()


print(f"2. Processing main sites data in chunks of {CHUNK_SIZE} rows...")

try:
    # Use read_sql_query with chunksize to read the large main result set
    for chunk_df in pd.read_sql_query(MAIN_DATA_QUERY, engine, chunksize=CHUNK_SIZE):
        
        # --- Python Logic for Key Creation and Merge ---
        
        # 1. Create the Custom LTE key
        chunk_df['Custom LTE'] = chunk_df['market_id'].astype(str) + \
                                  chunk_df['NE_ID'].astype(str).str.slice(-3)
        
        # 2. PERFORM THE SINGLE-KEY MERGE (Custom LTE == P_ENB_ID)
        chunk_df = pd.merge(
            chunk_df, 
            df_ov_lookup, 
            left_on='Custom LTE',  # Main data key
            right_on='P_ENB_ID',   # Lookup data key
            how='left'
        )
        
        # Clean up the redundant merge key column from OVData
        chunk_df.drop(columns=['P_ENB_ID'], inplace=True) 
        
        # 3. Categorization (Macro/SC)
        chunk_df['NE NAME'] = chunk_df['NE NAME'].astype(str).str.strip().str.lower()
        chunk_df['category'] = chunk_df['NE NAME'].apply(
            lambda x: 'SC' if any(cond in x for cond in sc_conditions) or x.startswith('4') else 'Macro'
        )
        
        # 4. Add the S// ID (Reverting to Custom LTE as the S// ID for simplicity)
        chunk_df['S// ID'] = chunk_df['Custom LTE'] 
        
        # --- Write Chunk to CSV ---
        
        # Define the explicit order for the output CSV columns
        output_columns = [
            'region', 'NE_ID', 'ne_type', 'NE NAME', 'market_id', 
            'Custom LTE', 'S// ID', 'Project_Description_Value', 'category' 
        ]
        
        # Write header only for the first chunk
        chunk_df[output_columns].to_csv(
            OUTPUT_FILE, 
            mode='a', 
            header=not header_written, 
            index=False
        )
        
        if not header_written:
            print(f"   First chunk saved and header written.")
            header_written = True
        
    print("\nâœ… Data processing complete. All chunks saved to CSV.")

except Exception as e:
    print(f"\nFATAL ERROR during chunk processing: {e}")
