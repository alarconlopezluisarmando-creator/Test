I have below code but is not working.

After run, I got below error:

Database engine created successfully.
Failed to read Excel file: Missing optional dependency 'openpyxl'.  Use pip or conda to install openpyxl.
An error occurred: Error reading Excel file from path: \\netapp\depts\Jannat\SNAP\OV\Viaero\Power plant_report.xlsx

code was working propertly before, the only change tath I did was add a new column called "updated"

Could you help me?

To fix your code, you need to install the openpyxl library, which is the missing dependency required by pandas to read .xlsx files. The error message is clear: Missing optional dependency 'openpyxl'.
Here is the full, corrected code. Before running it, make sure you've installed the necessary library. Open your terminal or command prompt and run:
pip install openpyxl

Corrected Python Code
import pandas as pd
from sqlalchemy import create_engine
import pyodbc
from datetime import datetime

# Database configuration
DB_SERVER = '105.52.12.43'
DB_PORT = '1433'
DB_DATABASE = 'ViaeroDWH'
DB_USER = 'RFTool_xx'
DB_PASSWORD = 's2024!'
DB_DRIVER = '{ODBC Driver 17 for SQL Server}'

# Excel file configuration
FILE_PATH = r'\\netapp\depts\Jannat\SNAP\OV\Viaero\Power plant_report.xlsx'
TABLE_NAME = 'Power_Plant'

def create_database_engine():
    """
    Creates a SQLAlchemy engine for the database connection.
    """
    connection_string = (
        f'mssql+pyodbc://{DB_USER}:{DB_PASSWORD}@{DB_SERVER}:{DB_PORT}/{DB_DATABASE}'
        f'?driver={DB_DRIVER.replace("{", "").replace("}", "")}'
    )
    try:
        engine = create_engine(connection_string)
        print("Database engine created successfully.")
        return engine
    except Exception as exc:
        print(f"Failed to create database engine: {exc}")
        print("Please verify the database credentials and configuration.")
        raise Exception("Database connection failed.")

def read_excel_file(file_path):
    """
    Reads data from an Excel file into a pandas DataFrame.
    """
    try:
        # The 'engine' parameter specifies which library to use for reading the file.
        # 'openpyxl' is required for .xlsx files.
        df = pd.read_excel(file_path, engine='openpyxl')
        print(f"Successfully read data from {file_path}")
        return df
    except Exception as exc:
        print(f"Failed to read Excel file: {exc}")
        # Re-raise a more specific error with the file path
        raise Exception(f"Error reading Excel file from path: {file_path}")

def insert_data_into_sql_table(engine, df, table_name):
    """
    Inserts a pandas DataFrame into a SQL Server table, adding an 'updated' column.
    """
    try:
        # Add the 'updated' column with the current timestamp
        df['updated'] = datetime.now()
        
        # Insert the DataFrame into the SQL table
        # if_exists='replace' will drop and re-create the table
        # on each run, which is why the new column is preserved.
        df.to_sql(table_name, engine, index=False, if_exists='replace')
        print(f"Data successfully inserted into the '{table_name}' table with timestamp.")
    except Exception as exc:
        print(f"Database insertion failed: {exc}")
        raise Exception(f"Error inserting data into the '{table_name}' table.")

def main():
    """
    Main function to orchestrate the data extraction and loading process.
    """
    try:
        engine = create_database_engine()
        df = read_excel_file(FILE_PATH)
        insert_data_into_sql_table(engine, df, TABLE_NAME)
    except Exception as exc:
        # A general error handler for the main process
        print(f"An error occurred: {exc}")

if __name__ == "__main__":
    main()



