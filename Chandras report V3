import pandas as pd
import pyodbc
import os
from sqlalchemy import create_engine

# NOTE: server, DB, USERNAME, PSSWD must be defined for the code to run.

# Define the ne_type values and their correct report names
CDU30_TYPE = 'macro_indoor_dist' # The type that is conditionally changed
UADPF_TYPE = 'udu_cnf'
NSB_TYPE = 'nsb_type' 
NE_TYPES_FILTER = [CDU30_TYPE, UADPF_TYPE, NSB_TYPE]
NE_TYPES_STRING = "', '".join(NE_TYPES_FILTER)

# Define the file path for the output
TEMP_CSV_PATH = r'C:\Users\l5.lopez\Downloads\00_to delete\raw_data.csv' 
EXCEL_OUTPUT_FILE = os.path.join(os.path.dirname(TEMP_CSV_PATH), 'raw_data.xlsx')
CHUNK_SIZE = 50000

# ------------------------------------------------------------------
# --- 1. Database Connection and Query Setup ---
try:
    # Assuming connection variables are globally defined in your script environment
    server_tcp = 'tcp:' + server 
    connection_string = f'DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={server_tcp};DATABASE={DB};Encrypt=yes;TrustServerCertificate=yes;UID={USERNAME};PWD={PSSWD}'
    engine = create_engine(f'mssql+pyodbc:///?odbc_connect={connection_string}', fast_executemany=True)
except NameError:
    print("FATAL ERROR: Database connection variables (server, DB, USERNAME, PSSWD) are not defined.")
    exit()

# --------------------------------------------------------------------------
# 2. SQL QUERIES 
# --------------------------------------------------------------------------
MAIN_DATA_QUERY = f"""
SELECT
    M.[market_id],
    M.[NE_ID],
    M.[ne_type],
    M.[NE NAME],
    M.[region]
FROM [RANCOMM].[dbo].[daily_sites_mapping] M
WHERE 
    M.ne_type IN ('{NE_TYPES_STRING}')
"""

OV_LOOKUP_QUERY = """
SELECT 
    [P_ENB_ID],             
    [P:Project Site Type]
FROM [RANCOMM].[dbo].[OVData]
"""

VZW_4G_CIQ_MAIN_QUERY = """
SELECT 
    [Samsung eNB ID]
FROM [VZW_SNAP].[dbo].[VZW_4G_CIQ_MAIN]
"""

# --------------------------------------------------------------------------
# 3. Memory-Efficient Processing
# --------------------------------------------------------------------------

# Clean up files
if os.path.exists(TEMP_CSV_PATH): os.remove(TEMP_CSV_PATH)
if os.path.exists(EXCEL_OUTPUT_FILE):
    os.remove(EXCEL_OUTPUT_FILE)
    print(f"Removed existing Excel file: {EXCEL_OUTPUT_FILE}")

sc_conditions = [
    'sc_od', 'sc_ib', 'das_od', 'das_ib', 'cran_das', 
    'ib', 'das', 'sc', 'odas' 
]
processed_chunks = []

print(f"Starting processing in chunks of {CHUNK_SIZE} rows...")

# --- Load Lookup Tables ---
try:
    # OV Data Lookup (Project Site Type)
    df_ov_lookup = pd.read_sql(OV_LOOKUP_QUERY, engine)
    df_ov_lookup['P_ENB_ID'] = df_ov_lookup['P_ENB_ID'].astype(str).str.strip().str.replace(r'\.0$', '', regex=True)
    df_ov_lookup['P_ENB_ID'] = df_ov_lookup['P_ENB_ID'].str.replace(r'[^\w\s]', '', regex=True).str.strip()
    df_ov_lookup.drop_duplicates(subset=['P_ENB_ID'], keep='first', inplace=True)

    # VZW CIQ Data Lookup (Samsung eNB ID)
    df_vzw = pd.read_sql(VZW_4G_CIQ_MAIN_QUERY, engine)
    df_vzw['Samsung eNB ID'] = df_vzw['Samsung eNB ID'].astype(str).str.strip()
    vzw_id_set = set(df_vzw['Samsung eNB ID'].unique())

    print(f"   Loaded lookup tables. OV: {len(df_ov_lookup)} records, VZW unique IDs: {len(vzw_id_set)}.")
    
except Exception as e:
    print(f"FATAL ERROR: Could not load required lookup tables: {e}")
    exit()

print("Processing main sites data...")

# --- Main Chunking Process ---
try: 
    for i, chunk_df in enumerate(pd.read_sql_query(MAIN_DATA_QUERY, engine, chunksize=CHUNK_SIZE)):
        print(f"   Processing chunk {i+1}...")
        
        # 1. Key Creation (Custom LTE)
        market_id_str = chunk_df['market_id'].astype(str).str.strip().str.replace(r'\.0$', '', regex=True)
        ne_id_str = chunk_df['NE_ID'].astype(str).str.strip().str.replace(r'\.0$', '', regex=True)
        chunk_df['Custom LTE'] = market_id_str + ne_id_str.str.slice(-3)
        chunk_df['Custom LTE'] = chunk_df['Custom LTE'].str.replace(r'[^\w\s]', '', regex=True).str.strip()
        
        # 2. PERFORM THE OVData MERGE 
        chunk_df = pd.merge(chunk_df, df_ov_lookup, left_on='Custom LTE', right_on='P_ENB_ID', how='left')
        chunk_df['Project Site Type'] = chunk_df['P:Project Site Type'].fillna('Merge Key Mismatch')
        chunk_df.drop(columns=['P:Project Site Type', 'P_ENB_ID'], inplace=True, errors='ignore')
        
        # 3. CONDITIONAL NE_TYPE UPDATE (The specific requirement)
        chunk_df['NE_ID_Clean'] = chunk_df['NE_ID'].astype(str).str.strip()
        
        # Check if original type is CDU30 AND NE_ID is found in the VZW CIQ set
        condition = (chunk_df['ne_type'] == CDU30_TYPE) & (chunk_df['NE_ID_Clean'].isin(vzw_id_set))
        
        # Apply the update: change ne_type to NSB_TYPE where the condition is True
        chunk_df.loc[condition, 'ne_type'] = NSB_TYPE
        
        chunk_df.drop(columns=['NE_ID_Clean'], inplace=True)

        # 4. Categorization (Macro/SC)
        chunk_df['NE NAME'] = chunk_df['NE NAME'].astype(str).str.strip().str.lower()
        chunk_df['category'] = chunk_df['NE NAME'].apply(
            lambda x: 'SC' if any(cond in x for cond in sc_conditions) or x.startswith('4') else 'Macro'
        )
        
        # 5. Add the S// ID
        chunk_df['S// ID'] = chunk_df['Custom LTE'] 
        
        output_columns = ['region', 'NE_ID', 'market_id', 'Custom LTE', 'S// ID', 'ne_type', 'NE NAME', 'category', 'Project Site Type']
        processed_chunks.append(chunk_df[output_columns].copy())

    # --- Summary Creation and Excel Export ---

    df_processed = pd.concat(processed_chunks, ignore_index=True)
    
    # Global Deduping for Cross-Chunk Duplicates
    initial_rows = len(df_processed)
    df_processed.drop_duplicates(
        subset=['NE_ID', 'market_id', 'ne_type'],
        keep='first',
        inplace=True
    )
    if len(df_processed) < initial_rows:
        print(f"   SUCCESS: Removed {initial_rows - len(df_processed)} duplicate records.")
    
    # Check if data is empty after deduping
    if df_processed.empty:
        print("\nCRITICAL WARNING: No data processed. The Excel file will contain empty sheets.")
        summary_table = pd.DataFrame({'Message': ['No data processed.']}, index=['No Data']).set_index('Message')
    else:
        # Create and format the summary table
        summary_table_base = df_processed.groupby(['region', 'ne_type', 'category']).size().reset_index(name='count')
        summary_table = summary_table_base.pivot_table(index='region', columns=['ne_type', 'category'], values='count', aggfunc='sum', fill_value=0)
        summary_table.columns = [f"{col[0]}_{col[1]}" for col in summary_table.columns]

        final_cols_order = []
        for ne_type in ['macro_indoor_dist', 'udu_cnf', 'nsb_type']:
            ne_type_short = 'CDU30' if ne_type == 'macro_indoor_dist' else 'uADPF' if ne_type == 'udu_cnf' else 'NSB'
            macro_col, sc_col = f"{ne_type}_Macro", f"{ne_type}_SC"
            total_col = f"{ne_type_short}_Total"
            
            summary_table[total_col] = summary_table.get(macro_col, 0) + summary_table.get(sc_col, 0)
            final_cols_order.extend([col for col in [total_col, macro_col, sc_col] if col in summary_table.columns])
            
        if final_cols_order:
            summary_table = summary_table[final_cols_order]
        
        summary_table.loc['Total'] = summary_table.sum()

    # Save the Excel file (Uses overwrite mode implicitly with pd.ExcelWriter)
    print(f"\nSaving final output to {EXCEL_OUTPUT_FILE}...")
    with pd.ExcelWriter(EXCEL_OUTPUT_FILE, engine='xlsxwriter') as writer:
        df_processed.to_excel(writer, sheet_name='Raw Data', index=False)
        summary_table.to_excel(writer, sheet_name='Summary Table')
        print(f"Successfully created '{EXCEL_OUTPUT_FILE}' with two sheets.")
        
    print("\n--- Summary Table ---")
    print(summary_table)

except Exception as e:
    print(f"\nCRITICAL RUNTIME ERROR: An error occurred during main processing or summary creation: {e}")
finally:
    print("\nData processing attempt complete. Check files and logs for details.")



\\netapp\depts\Jannat\SWami\Input\Mastersitelist_XLPT.xlsx
