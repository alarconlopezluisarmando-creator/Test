import pandas as pd
import pyodbc
import os
from sqlalchemy import create_engine
# dask.dataframe and numpy are not used and are removed

# NOTE: server, DB, USERNAME, PSSWD must be defined for the code to run.
# Assuming these variables are defined in your environment before execution.

# Define the ne_type values and their correct report names
CDU30_TYPE = 'macro_indoor_dist'
UADPF_TYPE = 'udu_cnf'
NSB_TYPE = 'nsb_type' 
NE_TYPES_FILTER = [CDU30_TYPE, UADPF_TYPE, NSB_TYPE]
NE_TYPES_STRING = "', '".join(NE_TYPES_FILTER) # Used for the SQL IN clause

# Define the file path for the output
OUTPUT_FILE = r'C:\Users\l5.lopez\Downloads\00_to delete\raw_data.csv'
# ðŸŒŸ NEW VARIABLE: Defines the path for the final Excel file (raw_data.xlsx)
EXCEL_OUTPUT_FILE = os.path.join(os.path.dirname(OUTPUT_FILE), 'raw_data.xlsx')
CHUNK_SIZE = 50000  # Number of rows to process in memory at a time

# ------------------------------------------------------------------

# --- 1. Database Connection and Query Setup ---

# Configure the connection string and engine
try:
    server_tcp = 'tcp:' + server 
    connection_string = f'DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={server_tcp};DATABASE={DB};Encrypt=yes;TrustServerCertificate=yes;UID={USERNAME};PWD={PSSWD}'
    engine = create_engine(f'mssql+pyodbc:///?odbc_connect={connection_string}', fast_executemany=True)
except NameError:
    print("FATAL ERROR: Database connection variables (server, DB, USERNAME, PSSWD) are not defined.")
    exit()

# --------------------------------------------------------------------------
# 2. SQL QUERIES 
# --------------------------------------------------------------------------

# 2a. Query for the main site mapping data (M)
MAIN_DATA_QUERY = f"""
SELECT
    M.[market_id],
    M.[NE_ID],
    M.[ne_type],
    M.[NE NAME],
    M.[region]
FROM [RANCOMM].[dbo].[daily_sites_mapping] M
WHERE 
    M.ne_type IN ('{NE_TYPES_STRING}')
"""

# 2b. Query for the OVData LOOKUP TABLE 
OV_LOOKUP_QUERY = """
SELECT 
    [P_ENB_ID],             
    [P:Project Site Type]
FROM [RANCOMM].[dbo].[OVData]
"""

# 2c. Query for the VZW_4G_CIQ_MAIN table
VZW_4G_CIQ_MAIN_QUERY = """
SELECT 
    [Samsung eNB ID]
FROM [VZW_SNAP].[dbo].[VZW_4G_CIQ_MAIN]
"""

# --------------------------------------------------------------------------
# 3. Memory-Efficient Processing
# --------------------------------------------------------------------------

# Delete the existing output file to prevent appending old data
if os.path.exists(OUTPUT_FILE):
    os.remove(OUTPUT_FILE)
    print(f"Removed existing CSV file: {OUTPUT_FILE}")

# Also remove the target Excel file if it exists, to ensure a clean run
if os.path.exists(EXCEL_OUTPUT_FILE):
    os.remove(EXCEL_OUTPUT_FILE)
    print(f"Removed existing Excel file: {EXCEL_OUTPUT_FILE}")

header_written = False
sc_conditions = [
    'sc_od', 'sc_ib', 'das_od', 'das_ib', 'cran_das', 
    'ib', 'das', 'sc', 'odas' 
]

print(f"Starting memory-efficient process. Output CSV: {OUTPUT_FILE}")

# --- Load Lookup Tables ---
print(f"1. Fetching small OVData lookup table...")
try:
    df_ov_lookup = pd.read_sql(OV_LOOKUP_QUERY, engine)
    
    # Cleaning and Deduping OV Lookup
    df_ov_lookup['P_ENB_ID'] = df_ov_lookup['P_ENB_ID'].astype(str).str.strip().str.replace(r'\.0$', '', regex=True)
    df_ov_lookup['P_ENB_ID'] = df_ov_lookup['P_ENB_ID'].str.replace(r'[^\w\s]', '', regex=True).str.strip()
    initial_lookup_count = len(df_ov_lookup)
    df_ov_lookup.drop_duplicates(subset=['P_ENB_ID'], keep='first', inplace=True)
    print(f"   Loaded {len(df_ov_lookup)} records for lookup (removed {initial_lookup_count - len(df_ov_lookup)} duplicates).")

    df_vzw = pd.read_sql(VZW_4G_CIQ_MAIN_QUERY, engine)
    df_vzw['Samsung eNB ID'] = df_vzw['Samsung eNB ID'].astype(str).str.strip()
    print(f"   Loaded {len(df_vzw)} records from VZW CIQ table.")
    
except Exception as e:
    print(f"FATAL ERROR: Could not load required lookup tables: {e}")
    exit()

print(f"2. Processing main sites data in chunks of {CHUNK_SIZE} rows...")

processed_chunks = []

# --- Main Chunking Process and Error Handling ---
try: 
    for chunk_df in pd.read_sql_query(MAIN_DATA_QUERY, engine, chunksize=CHUNK_SIZE):
        
        # FIX: Remove duplicates based on NE_ID (primary key) in the main data
        initial_rows = len(chunk_df)
        chunk_df.drop_duplicates(subset=['NE_ID'], keep='first', inplace=True)
        if len(chunk_df) < initial_rows:
            print(f"   Warning: Removed {initial_rows - len(chunk_df)} duplicate NE_ID records in this chunk.")
        
        # 1. ENHANCED CLEANING: Prepare components for the Custom LTE key
        market_id_str = chunk_df['market_id'].astype(str).str.strip().str.replace(r'\.0$', '', regex=True)
        ne_id_str = chunk_df['NE_ID'].astype(str).str.strip().str.replace(r'\.0$', '', regex=True)
        
        # Create the Custom LTE key and aggressively clean it
        chunk_df['Custom LTE'] = market_id_str + ne_id_str.str.slice(-3)
        chunk_df['Custom LTE'] = chunk_df['Custom LTE'].str.replace(r'[^\w\s]', '', regex=True).str.strip()
        
        # 2. PERFORM THE OVData MERGE 
        chunk_df = pd.merge(
            chunk_df, 
            df_ov_lookup, 
            left_on='Custom LTE', 
            right_on='P_ENB_ID',
            how='left'
        )
        chunk_df['Project Site Type'] = chunk_df['P:Project Site Type'].fillna('Merge Key Mismatch')
        chunk_df.drop(columns=['P:Project Site Type', 'P_ENB_ID'], inplace=True, errors='ignore')
        
        # 3. PERFORM THE VZW CIQ MERGE (to update ne_type)
        chunk_df['NE_ID'] = chunk_df['NE_ID'].astype(str).str.strip()
        chunk_df = pd.merge(chunk_df, df_vzw, left_on='NE_ID', right_on='Samsung eNB ID', how='left', indicator=True)
        chunk_df['ne_type'] = chunk_df.apply(lambda row: 'nsb_type' if row['_merge'] == 'both' else row['ne_type'], axis=1)
        chunk_df.drop(columns=['Samsung eNB ID', '_merge'], inplace=True, errors='ignore')

        # 4. Categorization (Macro/SC)
        chunk_df['NE NAME'] = chunk_df['NE NAME'].astype(str).str.strip().str.lower()
        chunk_df['category'] = chunk_df['NE NAME'].apply(
            lambda x: 'SC' if any(cond in x for cond in sc_conditions) or x.startswith('4') else 'Macro'
        )
        
        # 5. Add the S// ID
        chunk_df['S// ID'] = chunk_df['Custom LTE'] 
        
        # Define the EXPLICIT list of columns for the output CSV
        output_columns = [
            'region',
            'NE_ID',
            'market_id', 
            'Custom LTE', 
            'S// ID', 
            'ne_type',
            'NE NAME',
            'category', 
            'Project Site Type' 
        ]
        
        # Write chunk to CSV
        chunk_df[output_columns].to_csv(
            OUTPUT_FILE, 
            mode='a', 
            header=not header_written, 
            index=False
        )
        
        if not header_written:
            print(f"   First chunk saved and header written.")
            header_written = True
        
        # Append the chunk to the list for later summary creation
        processed_chunks.append(chunk_df[output_columns].copy())

    # --- Summary Creation and Excel Export (Runs only after all chunks are processed) ---

    # Concatenate the processed chunks
    df_processed = pd.concat(processed_chunks, ignore_index=True)
    
    # Create the summary table
    summary_table_base = df_processed.groupby(['region', 'ne_type', 'category']).size().reset_index(name='count')
    
    if summary_table_base.empty:
        print("Warning: No records processed for the final summary table. Creating empty summary placeholder.")
        summary_table = pd.DataFrame({'Region': ['No Data']}, index=['No Data']).set_index('Region')
    else:
        # Pivot the summary table
        summary_table = summary_table_base.pivot_table(
            index='region', 
            columns=['ne_type', 'category'], 
            values='count', 
            aggfunc='sum', 
            fill_value=0
        )
        summary_table.columns = [f"{col[0]}_{col[1]}" for col in summary_table.columns]

        # Add total columns and build column order
        final_cols_order = []
        for ne_type in ['macro_indoor_dist', 'udu_cnf', 'nsb_type']:
            ne_type_short = 'CDU30' if ne_type == 'macro_indoor_dist' else 'uADPF' if ne_type == 'udu_cnf' else 'NSB'
            macro_col = f"{ne_type}_Macro"
            sc_col = f"{ne_type}_SC"
            total_col = f"{ne_type_short}_Total"
            
            macro_counts = summary_table.get(macro_col, 0)
            sc_counts = summary_table.get(sc_col, 0)

            summary_table[total_col] = macro_counts + sc_counts
            
            final_cols_order.extend([
                col for col in [total_col, macro_col, sc_col] if col in summary_table.columns
            ])
            
        # Reorder the columns
        if final_cols_order:
            summary_table = summary_table[final_cols_order]
        
        # Add Total row
        summary_table.loc['Total'] = summary_table.sum()

    # Save the raw data and the summary table to the Excel file
    print(f"\nSaving final output to {EXCEL_OUTPUT_FILE}...")
    with pd.ExcelWriter(EXCEL_OUTPUT_FILE, engine='xlsxwriter') as writer:
        df_processed.to_excel(writer, sheet_name='Raw Data', index=False)
        summary_table.to_excel(writer, sheet_name='Summary Table')
        print(f"Successfully created '{EXCEL_OUTPUT_FILE}' with two sheets.")
        
    # Print the summary table
    print("\n--- Summary Table ---")
    print(summary_table)

except Exception as e:
    print(f"\nCRITICAL RUNTIME ERROR: An error occurred during main processing or summary creation: {e}")
finally:
    print("\nData processing attempt complete. Check files and logs for details.")
