import pandas as pd
import pyodbc
from sqlalchemy import create_engine

server = '105.52.12.164,1433'
server_tcp = 'tcp:' + server
USERNAME = 'rfuseradmin'
PSSWD = 'Newtisgreat!'
DB = 'RANCOMM'

# Configure the connection string and engine
connection_string = f'DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={server_tcp};DATABASE={DB};Encrypt=yes;TrustServerCertificate=yes;UID={USERNAME};PWD={PSSWD}'
engine = create_engine(f'mssql+pyodbc:///?odbc_connect={connection_string}', fast_executemany=True)

# --- 2. Data Fetch ---
query = """SELECT 
       [market_id]
      ,[NE_ID]
      ,[NE_PREFIX]
      ,[ne_type]
      ,[EMS NAME]
      ,[NE NAME]
      ,[NE SOFTWARE]
      ,[region]
      ,[eNB_ID]
  FROM [RANCOMM].[dbo].[daily_sites_mapping]"""

try:
    df = pd.read_sql(query, engine)
except Exception as e:
    print(f"Error connecting to database or fetching data: {e}")
    # Handle error or exit if connection fails
    exit()

# --- 3. Filtering and Categorization ---

# Filter for the relevant ne_type values first
df = df[(df['ne_type'] == 'udu_cnf') | (df['ne_type'] == 'macro_indoor_dist')]

# Define the conditions for SC
sc_conditions = ['sc_od', 'sc_ib', 'das_od', 'das_ib', 'cran_mc', 'cran_das']

# Normalize the 'NE NAME' column for consistent comparison
df['NE NAME'] = df['NE NAME'].str.strip().str.lower()

# Create the 'category' column (Macro/SC) using a more readable approach
def categorize_ne(ne_name):
    """Assigns 'SC' if any condition is found, otherwise 'Macro'."""
    return 'SC' if any(cond in ne_name for cond in sc_conditions) else 'Macro'

df['category'] = df['NE NAME'].apply(categorize_ne)

# --- 4. Final Report Aggregation (The simplified fix) ---

# Group by region and the new 'category', count the NE_ID, and pivot 'category' into columns
report = df.groupby(['region', 'category'])['NE_ID'].count().unstack(fill_value=0)

# Ensure only 'Macro' and 'SC' columns exist (optional, but good practice)
report = report[['Macro', 'SC']]

# Rename the index for clarity
report.index.name = 'Region'

print(report)
