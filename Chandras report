import pandas as pd
import pyodbc
from sqlalchemy import create_engine

server = '105.52.12.164,1433'
server_tcp = 'tcp:' + server
USERNAME = 'rfuseradmin'
PSSWD = 'Newtisgreat!'
DB = 'RANCOMM'

# Configure the connection string and engine
connection_string = f'DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={server_tcp};DATABASE={DB};Encrypt=yes;TrustServerCertificate=yes;UID={USERNAME};PWD={PSSWD}'
engine = create_engine(f'mssql+pyodbc:///?odbc_connect={connection_string}', fast_executemany=True)

# --- 2. Data Fetch ---
query = """SELECT 
       [market_id]
      ,[NE_ID]
      ,[NE_PREFIX]
      ,[ne_type]
      ,[EMS NAME]
      ,[NE NAME]
      ,[NE SOFTWARE]
      ,[region]
      ,[eNB_ID]
  FROM [RANCOMM].[dbo].[daily_sites_mapping]"""

try:
    df = pd.read_sql(query, engine)
    print(f"Successfully fetched {len(df)} records.")
except Exception as e:
    print(f"‚ùå Error connecting to database or fetching data: {e}")
    # You'll see this error if the connection fails
    exit()

# --- 3. Filtering and Categorization ---

# Define the conditions for SC. I recommend using more specific terms like 'cran_mc'
# or removing the generic '_ib' if it's causing misclassification of Macro sites.
# I've used your last list, but be aware '_ib' might be too broad.
sc_conditions = ['sc_od', 'sc_ib', 'das_od', 'das_ib', 'cran_das', '_ib']

# Normalize the 'NE NAME' column for consistent comparison
df['NE NAME'] = df['NE NAME'].str.strip().str.lower()

# Create the 'category' column (Macro/SC)
def categorize_ne(ne_name):
    """Assigns 'SC' if any condition is found, otherwise 'Macro'."""
    return 'SC' if any(cond in ne_name for cond in sc_conditions) else 'Macro'

df['category'] = df['NE NAME'].apply(categorize_ne)

# -----------------------------------------------------------------------------
# üö® IMPORTANT DIAGNOSTIC CHECK üö®
# This checks why your count dropped from 800+ to <100.
# Run this *before* the ne_type filter to see which ne_types your IB sites have.
# -----------------------------------------------------------------------------
print("\n--- Diagnostic Check on Initial Data (Based on Name Category) ---")
total_sc_sites = len(df[df['category'] == 'SC'])
print(f"Total sites categorized as 'SC' (by name): {total_sc_sites}")
print("Distribution of NE Type for ALL 'SC' sites:")
print(df[df['category'] == 'SC']['ne_type'].value_counts().head(5))
print("------------------------------------------------------------------\n")


# Apply the ne_type filter. 
# üõë If your 800+ sites have a different ne_type (e.g., 'crane_v1'), 
# they will be filtered out here.
df = df[(df['ne_type'] == 'udu_cnf') | (df['ne_type'] == 'macro_indoor_dist')]

# -----------------------------------------------------------------------------

# --- 4. Final Report Aggregation (Simplified and Corrected) ---
# This uses the efficient groupby + unstack method to get a Macro/SC column report.

# Group by region and the 'category', count the NE_ID, and pivot 'category' into columns
report = df.groupby(['region', 'category'])['NE_ID'].count().unstack(fill_value=0)

# Optional: Ensure the columns are in the desired order
if 'Macro' in report.columns and 'SC' in report.columns:
    report = report[['Macro', 'SC']]
elif 'Macro' in report.columns:
    report = report[['Macro']]
elif 'SC' in report.columns:
    report = report[['SC']]

# Rename the index for clarity
report.index.name = 'Region'
report.columns.name = 'Category'

print("--- Final Macro/SC Site Count Report ---")
print(report)


Region/ Site Count	Samsung (SEA + VZ)										
	CDU30 Count			uADPF Count			NSB			Total	SS Total %
	Total	Macro	SC	Total	Macro	SC	Total	Macro	SC		
Central Gulf Coast	4053			1118			814			5171	69%
