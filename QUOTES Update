    # ... (code continues from before the erroneous block) ...

    # 1. Extract the Quote ID (e.g., 'Quote_SV0319.00') from the 'Document' column
    #    Splits the string by the first '-', and keeps the first part
    # NOTE: This logic seems redundant, as 'QT:Quote ID' was already extracted using regex earlier.
    # We will assume you want to create a new column 'QT:Quote ID_quotes' with this simpler prefix extraction.
    df_quotes['QT:Quote ID_quotes'] = df_quotes['Document'].str.split('-', n=1).str[0]
    
    # 2. Sort the DataFrame to put the latest 'Review History' on top for each Quote ID
    #    Ascending=True groups the IDs; Ascending=False puts the highest/latest Review History first
    # FIX: Use df_quotes instead of the undefined Quotes_Report_
    df_quotes = df_quotes.sort_values(by=['QT:Quote ID_quotes', 'Review History'], ascending=[True, False])
    
    # 3. Remove duplicates, keeping only the first (which is the one with the latest Review History)
    # FIX: Use df_quotes instead of the undefined Quotes_Report_
    df_quotes = df_quotes.drop_duplicates(subset='QT:Quote ID_quotes', keep='first')

    # Requirement 5: Compare and find differences
    # ... (code continues) ...


def process_and_compare_files(quote_report_path, quote_tracker_path):
    # ... (loading, cleaning, and merge key creation logic remains the same) ...
    
    # --- CRITICAL FIX: Create Composite Merge Key ---
    df_quotes['MERGE_KEY'] = df_quotes['Site #'] + '_' + df_quotes['QT:Quote ID']
    df_tracker['MERGE_KEY'] = df_tracker['Site #'] + '_' + df_tracker['QT:Quote ID']

    # --- Merge on the unique "MERGE_KEY" ---
    merged_df = pd.merge(
        df_quotes,
        df_tracker,
        on='MERGE_KEY', # Using the new composite key
        how='left',
        suffixes=('_quotes', '_tracker')
    )
    
    # ... (Diagnostic Check and Concatenation Logic remains the same) ...

    # 1. Extract the Quote ID (e.g., 'Quote_SV0319.00') from the 'Document' column
    #    Splits the string by the first '-', and keeps the first part
    # FIX: Use df_quotes instead of Quotes_Report_
    df_quotes['QT:Quote ID_quotes'] = df_quotes['Document'].str.split('-', n=1).str[0]
    
    # 2. Sort the DataFrame to put the latest 'Review History' on top for each Quote ID
    #    Ascending=True groups the IDs; Ascending=False puts the highest/latest Review History first
    # FIX: Use df_quotes instead of Quotes_Report_
    df_quotes = df_quotes.sort_values(by=['QT:Quote ID_quotes', 'Review History'], ascending=[True, False])
    
    # 3. Remove duplicates, keeping only the first (which is the one with the latest Review History)
    # FIX: Use df_quotes instead of Quotes_Report_
    df_quotes = df_quotes.drop_duplicates(subset='QT:Quote ID_quotes', keep='first')

    # Requirement 5: Compare and find differences
    df_diff = merged_df[(merged_df['Conca_quotes'] != merged_df['Conca_tracker']) | merged_df['Site #_tracker'].isnull()]
    
    # Remove rows where the Report's Quote ID was invalid (blank)
    df_diff = df_diff[df_diff['QT:Quote ID_quotes'].notna() & (df_diff['QT:Quote ID_quotes'] != '')]

    # Remove duplicates and keep the latest based on QT_QB_REVIEW_HISTORY
    df_diff = df_diff.sort_values(by=['QT:Quote ID_quotes', 'QT:QB - Review History'], ascending=[True, False])
    df_diff = df_diff.drop_duplicates(subset='QT:Quote ID_quotes', keep='first')
    
    # ... (Output logic remains the same) ...
