# Assuming QUOTE_ID_PATTERN is defined earlier in your actual script
# ... (Previous code for Site # and QT:Quote ID remains the same)

# Process Quotes Report
# ... (Code for Site # and QT:Quote ID validation) ...

# --- FIX START: Correcting the Review History processing for maximum robustness ---

if 'Review History' in df_quotes.columns:
    # 1. Clean the entire column first to remove any unexpected leading/trailing whitespace
    review_history_series = df_quotes['Review History'].astype(str).str.strip()
    
    # 2. Use a highly flexible regex to capture the date string.
    # We'll allow spaces around the brackets and be non-greedy in capturing the date parts.
    # Pattern explanation: Targets [3-letter month-1/2 digit day-2 digit year HH:MM AM/PM]
    # It explicitly handles the spaces and colon, but is flexible on the single/double digit day/hour/minute.
    DATE_REGEX = r'.*?\[\s*(\w{3}[-]\d{1,2}[-]\d{2}\s+\d{1,2}:\d{2}\s+[AP]M)\s*\].*'

    # Extract the DATE STRING (e.g., 'Nov-15-23 10:30 AM')
    # Use the 'str' accessor on the cleaned series.
    date_string_series = review_history_series.str.extract(DATE_REGEX, expand=False).str.strip()

    # 3. Convert the clean date string to a datetime object.
    # We keep the original format as it matches the pattern.
    df_quotes['Review History DT'] = pd.to_datetime(
        date_string_series,
        format='%b-%d-%y %I:%M %p',
        errors='coerce' # Set invalid parsing to NaT
    )
    
    # Check for successful extraction/conversion
    if df_quotes['Review History DT'].isna().all():
         # Provide a specific warning if conversion fails completely
         print("Error: Failed to extract a valid date/time from the 'Review History' column. Check the date format or the regex pattern.")
         return

    # 4. Sort by datetime and drop duplicates (using the extracted 'QT:Quote ID' as the subset)
    df_quotes = df_quotes.sort_values(by='Review History DT', ascending=False).drop_duplicates(
        subset='QT:Quote ID', 
        keep='first'
    )
    
    # 5. Drop the temporary datetime column
    df_quotes = df_quotes.drop(columns=['Review History DT'])
else:
    print("Error: The required 'Review History' column was not found in the report.")
    return

# --- FIX END ---
