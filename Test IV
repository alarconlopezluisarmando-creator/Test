hI, 

I need for the column [RFDS Approval History], the date that are comming inside, and the status, these cand be Approved, Rejected, Pending Review,
for each day I need a count with out duplicates for each of project ID, is one of the is empty, I need you put 0.

Dates need to be the columns and the status the rows. 

CREATE PROCEDURE dbo.GetRFDSApprovalSummary
AS
BEGIN
    DECLARE @sql NVARCHAR(MAX);
    DECLARE @dates_pivot NVARCHAR(MAX) = N'';

    -- Generate dynamic column names (e.g., [2025-09-11], [2025-09-12])
    ;WITH Dates AS (
      SELECT DATEADD(DAY, -7, GETDATE()) AS DateValue
      UNION ALL
      SELECT DATEADD(DAY, 1, DateValue)
      FROM Dates
      WHERE DateValue < GETDATE()
    )
    SELECT @dates_pivot += 'SUM(CASE WHEN ApprovalDate = ''' + CONVERT(nvarchar(10), d.DateValue, 120) + ''' THEN [Value] ELSE 0 END) AS [' + CONVERT(nvarchar(10), d.DateValue, 120) + '],'
    FROM Dates AS d
    OPTION (MAXRECURSION 0);

    -- Remove the last comma
    SET @dates_pivot = LEFT(@dates_pivot, LEN(@dates_pivot) - 1);

    -- Construct the final dynamic SQL statement
    SET @sql = N'
    WITH Dates AS (
      SELECT DATEADD(DAY, -7, GETDATE()) AS DateValue
      UNION ALL
      SELECT DATEADD(DAY, 1, DateValue)
      FROM Dates
      WHERE DateValue < GETDATE()
    ),
    DailyCounts AS (
      SELECT 
        d.DateValue AS ApprovalDate,
        COALESCE(a.ApprovedCount, 0) AS ApprovedCount,
        COALESCE(a.RejectedCount, 0) AS RejectedCount,
        COALESCE(a.PendingReviewCount, 0) AS PendingReviewCount
      FROM 
        Dates d
      LEFT JOIN 
        (
          SELECT 
            TRY_CONVERT(date, LEFT([RFDS Approval History], 10)) AS ApprovalDate,
            SUM(CASE WHEN [RFDS Review Status Text] = ''Approved'' THEN 1 ELSE 0 END) AS ApprovedCount,
            SUM(CASE WHEN [RFDS Review Status Text] = ''Rejected'' THEN 1 ELSE 0 END) AS RejectedCount,
            SUM(CASE WHEN [RFDS Review Status Text] = ''Pending Review'' THEN 1 ELSE 0 END) AS PendingReviewCount
          FROM 
            [ViaeroDWH].[dbo].[QB_RFDS_3days]
          WHERE 
            TRY_CONVERT(date, LEFT([RFDS Approval History], 10)) IS NOT NULL
          GROUP BY 
            TRY_CONVERT(date, LEFT([RFDS Approval History], 10))
        ) a 
      ON d.DateValue = a.ApprovalDate
    ),
    UnpivotedData AS (
        SELECT ''Approved'' AS Status, ApprovalDate, ApprovedCount AS [Value] FROM DailyCounts
        UNION ALL
        SELECT ''Rejected'' AS Status, ApprovalDate, RejectedCount AS [Value] FROM DailyCounts
        UNION ALL
        SELECT ''Pending Review'' AS Status, ApprovalDate, PendingReviewCount AS [Value] FROM DailyCounts
    )
    SELECT 
      Status, ' + @dates_pivot + '
    FROM 
      UnpivotedData
    GROUP BY 
      Status
    OPTION (MAXRECURSION 0);';

    -- Execute the dynamic SQL
    EXEC sp_executesql @sql;
END;


Python code 

import pyodbc

# Database connection details
# Replace these with your actual server, database, username, and password
server = 'your_server_name'
database = 'ViaeroDWH'
username = 'your_username'
password = 'your_password'

# Create the connection string
cnxn_str = (
    f'DRIVER={{ODBC Driver 17 for SQL Server}};'
    f'SERVER={server};'
    f'DATABASE={database};'
    f'UID={username};'
    f'PWD={password};'
)

try:
    # Establish the connection
    cnxn = pyodbc.connect(cnxn_str)
    cursor = cnxn.cursor()

    # Execute the stored procedure
    cursor.execute("{CALL dbo.GetRFDSApprovalSummary}")

    # Fetch the column names from the cursor description
    columns = [column[0] for column in cursor.description]

    # Fetch all the rows from the result set
    rows = cursor.fetchall()

    # Print the column headers
    print('\t'.join(columns))

    # Print each row
    for row in rows:
        print('\t'.join(str(item) for item in row))

except pyodbc.Error as ex:
    sqlstate = ex.args[0]
    print(f"Database error occurred: {ex}")

finally:
    # Close the cursor and connection
    if 'cursor' in locals():
        cursor.close()
    if 'cnxn' in locals():
        cnxn.close()

