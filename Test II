Attached you can find the original code. 
1. I need this milestone too and do the same that you did for the other. 
V:(F 4600) SSV Submitted to Customer FWA-Finish		Forecast			MS4 - SSV Submitted - FWA
V:(A 4600) SSV Submitted to Customer FWA-Finish		Actual			MS4 - SSV Submitted - FWA
V:(F 4630) SSV Submitted to Customer Mobility-Finish		Forecast			MS4 - SSV Submitted
V:(A 4630) SSV Submitted to Customer Mobility-Finish		Actual			MS4 - SSV Submitted

2. In column name when we have the Month - weekly, I need to add the work "Week", so I need something like : March 2025 - Week 13
4. Can you complete all the weeks for the year. I mean, if we dont have any data for some week, please add the week with "0" for all the rows. 

# Import libraries
import pandas as pd
from datetime import datetime
from ayx import Alteryx
import re
import warnings
import numpy as np

# Suppress the UserWarning from pandas about openpyxl
warnings.simplefilter(action='ignore', category=UserWarning)

# --- Step 2: Define file path and read data ---
file_path = r"\\netapp\depts\Jannat\Viaero\BMS_TrackerProgress.xlsx"
df = None

try:
    df = pd.read_excel(file_path, engine='openpyxl')
    print("File read successfully.")
except FileNotFoundError:
    print(f"Error: File not found at {file_path}")
    df = pd.DataFrame({'Error': ["File not found."]})
except Exception as e:
    print(f"Error reading file: {e}")
    df = pd.DataFrame({'Error': [f"File reading failed: {e}"]})

if 'Error' in df.columns:
    Alteryx.write(df, 1)
    exit()

# --- Step 3: Unpivot the milestone data ---
id_vars = [
    'CL:Customer Name', 'P:Viaero Root ID', 'C:Site Name (SPMS)',
    'WPK:Work Package Description', 'P:Project ID', 'C:Site ID',
    'P:Viaero Phase', 'P:Viaero Project Type', 'P:Cluster ID',
    'P:FWA (Existing)', 'P:FWA (Scope)', 'P:FWA (Final)',
    'P:Mobility (Existing)', 'P:Mobility (Scope)', 'P:Mobility (Final)',
    'M:Market', 'P:Project Class', 'P:Project Status'
]

milestone_cols = [col for col in df.columns if col.startswith('V:(')]
df_unpivoted = df.melt(id_vars=id_vars, value_vars=milestone_cols, var_name='Milestone', value_name='Status')

# --- Step 4: Extract required columns from unpivoted data ---
def extract_f_a(milestone_str):
    match = re.search(r'V:\((F|A)', milestone_str)
    return 'Forecast' if match and match.group(1) == 'F' else 'Actual'

milestone_mapping = {
    'Site Audit Walk Package Received-Finish': ('Site Audit Walk Package Received-Finish', 'Pre-Con - Site Walk'),
    'Ground Cabling BOM Received-Finish': ('Ground Cabling BOM Received-Finish\n Tower Cabling BOM Received-Finish', 'Pre-Con - Cable BOM and LE'),
    'Tower Cabling BOM Received-Finish': ('Ground Cabling BOM Received-Finish\n Tower Cabling BOM Received-Finish', 'Pre-Con - Cable BOM and LE - Tower'),
    '100% Construction Drawing Received-Finish': ('100% Construction Drawing Received-Finish', 'Pre-Con - Final Drawings'),
    'Billing Milestone 1 Complete-Finish': ('Billing Milestone 1 Complete', 'Pre-Con - Ms1 Rev Rec'),
    'Viaero Ground NTP Received-Finish': ('Viaero Ground NTP Received-Finish', 'Ground NTP'),
    'Ground Construction Complete-Finish': ('Ground Construction Complete-Finish', 'BBU - Ground Install (sites)'),
    'Billing Milestone 2 Complete-Finish': ('Billing Milestone 2 Complete', 'BBU - MS2 Rev Rec'),
    'Viaero Tower NTP Received-Finish': ('Viaero Tower NTP Received-Finish', 'Tower NTP'),
    'Tower Construction Start-Finish': ('Tower Construction Start', 'RRH - Tower CxS'),
    'Tower Installation Complete-Finish': ('Tower Installation Complete', 'RRH - Tower CxC'),
    'Billing Milestone 3 Complete-Finish': ('Billing Milestone 3 Complete', 'MS3 Rev Rec'),
    'Billing Milestone 4 Complete-Finish': ('Billing Milestone 4 Complete', 'MS4 Rev Rec'),
    'De-installed Equipment Return Completed-Finish': ('De-installed Equipment Return Completed', 'Cx Decom'),
    'Site Acceptance-Finish': ('Site Acceptance', 'MS5 - Final Site Acceptance'),
    'Billing Milestone 5 Complete-Finish': ('Billing Milestone 5 Complete', 'MS5 - Final Site Acceptance Rev Rec')
}

def extract_names(milestone_str):
    match = re.search(r'V:\((?:F|A) \d{4}\) (.+)', milestone_str)
    if match:
        milestone_name = match.group(1).strip()
    else:
        match = re.search(r'V:\((?:F|A)\) (.+)', milestone_str)
        if match:
            milestone_name = match.group(1).strip()
        else:
            milestone_name = milestone_str
    
    return milestone_mapping.get(milestone_name, (milestone_name, milestone_name))

df_unpivoted['F/A'] = df_unpivoted['Milestone'].apply(extract_f_a)
df_unpivoted[['Task Name', 'New name']] = df_unpivoted['Milestone'].apply(lambda x: pd.Series(extract_names(x)))
df_unpivoted['Weekly'] = df_unpivoted['New name']

# --- Step 5: Prepare data for weekly and monthly reports ---
df_unpivoted['Status'] = pd.to_datetime(df_unpivoted['Status'], errors='coerce')
df_unpivoted['Milestone_Count'] = 1

df_unpivoted['Week Label'] = df_unpivoted['Status'].dt.isocalendar().week.fillna(0).astype(int).astype(str).replace('0', 'No Date')
df_unpivoted['Month'] = df_unpivoted['Status'].dt.strftime('%B %Y').fillna('No Date')
df_unpivoted['Milestone_Count'] = df_unpivoted['Milestone_Count'].fillna(0)

# --- Step 6: Create weekly and monthly reports using pivot tables ---
def sort_columns_by_date(df_pivot):
    """Sorts the columns of a pivot table chronologically."""
    def sort_key(col_tuple):
        if isinstance(col_tuple, tuple):
            month_str = col_tuple[0]
        else:
            month_str = col_tuple

        if month_str == 'No Date':
            return datetime.max.date()
        try:
            return datetime.strptime(month_str, '%B %Y').date()
        except ValueError:
            return datetime.max.date()

    sorted_cols = sorted(df_pivot.columns, key=sort_key)
    return df_pivot.reindex(columns=sorted_cols)

# Weekly Report
weekly_pivot = pd.pivot_table(
    df_unpivoted,
    values='Milestone_Count',
    index=['Weekly', 'F/A', 'Task Name', 'Milestone'],
    columns=['Month', 'Week Label'],
    aggfunc='sum',
    fill_value=0
)
final_weekly_report = sort_columns_by_date(weekly_pivot)

# Monthly Report
monthly_pivot = pd.pivot_table(
    df_unpivoted,
    values='Milestone_Count',
    index=['Weekly', 'F/A', 'Task Name', 'Milestone'],
    columns=['Month'],
    aggfunc='sum',
    fill_value=0
)
final_monthly_report = sort_columns_by_date(monthly_pivot)

# --- Create and add cumulative rows to reports ---
def add_cumulative_rows(df_report):
    df_cumulative = pd.DataFrame(index=df_report.index, columns=df_report.columns).fillna(0)
    for index, row in df_report.iterrows():
        cumulative_row = np.cumsum(row.values)
        df_cumulative.loc[index] = cumulative_row

    # Create new DataFrame for cumulative rows, now with 4 levels
    df_cumulative.index = pd.MultiIndex.from_tuples(
        [(f"{idx[0]} (Cumulative)", idx[1], idx[2], "") for idx in df_cumulative.index],
        names=['Weekly', 'F/A', 'Task Name', 'Milestone']
    )
    
    # Concatenate and sort
    final_df = pd.concat([df_report, df_cumulative]).sort_index()
    return final_df.sort_index(level=['Weekly', 'F/A'], sort_remaining=False)

final_weekly_report = add_cumulative_rows(final_weekly_report)
final_monthly_report = add_cumulative_rows(final_monthly_report)

# --- Step 7: Write reports to multi-sheet Excel file ---
today = datetime.today()
output_filename = r"Viaero_BMS_ProgressTracker_" + today.strftime("%m.%d.%y") + "_OV MS rev1.xlsx"
try:
    with pd.ExcelWriter(output_filename, engine='openpyxl') as writer:
        final_weekly_report.to_excel(writer, sheet_name='Weekly Report')
        final_monthly_report.to_excel(writer, sheet_name='Monthly Report')
    print(f"Report saved successfully to {output_filename}")
except Exception as e:
    print(f"Error writing to Excel file: {e}")

# --- Step 8: Pass a DataFrame back to Alteryx ---
final_weekly_report_flat = final_weekly_report.reset_index()
# Rename columns to a flat list for Alteryx, handling the MultiIndex
new_columns_weekly = ['Weekly', 'F/A', 'Task Name', 'Milestone'] + [f"{col[0]} - {col[1]}" for col in final_weekly_report.columns]
final_weekly_report_flat.columns = new_columns_weekly

final_monthly_report_flat = final_monthly_report.reset_index()
# Rename columns to a flat list for Alteryx
new_columns_monthly = ['Weekly', 'F/A', 'Task Name', 'Milestone'] + [col for col in final_monthly_report.columns]
final_monthly_report_flat.columns = new_columns_monthly

# Pass the weekly report to Alteryx output 1
Alteryx.write(final_weekly_report_flat, 1)

# Pass the monthly report to Alteryx output 2
Alteryx.write(final_monthly_report_flat, 2)


Code V2

# Import libraries
import pandas as pd
from datetime import datetime, timedelta
from ayx import Alteryx
import re
import warnings
import numpy as np
from calendar import monthrange

# Suppress the UserWarning from pandas about openpyxl
warnings.simplefilter(action='ignore', category=UserWarning)

# --- Step 2: Define file path and read data ---
file_path = r"\\netapp\depts\Jannat\Viaero\BMS_TrackerProgress.xlsx"
df = None

try:
    df = pd.read_excel(file_path, engine='openpyxl')
    print("File read successfully.")
except FileNotFoundError:
    print(f"Error: File not found at {file_path}")
    df = pd.DataFrame({'Error': ["File not found."]})
except Exception as e:
    print(f"Error reading file: {e}")
    df = pd.DataFrame({'Error': [f"File reading failed: {e}"]})

if 'Error' in df.columns:
    Alteryx.write(df, 1)
    exit()

# --- Step 3: Unpivot the milestone data ---
id_vars = [
    'CL:Customer Name', 'P:Viaero Root ID', 'C:Site Name (SPMS)',
    'WPK:Work Package Description', 'P:Project ID', 'C:Site ID',
    'P:Viaero Phase', 'P:Viaero Project Type', 'P:Cluster ID',
    'P:FWA (Existing)', 'P:FWA (Scope)', 'P:FWA (Final)',
    'P:Mobility (Existing)', 'P:Mobility (Scope)', 'P:Mobility (Final)',
    'M:Market', 'P:Project Class', 'P:Project Status'
]

milestone_cols = [col for col in df.columns if col.startswith('V:(')]
df_unpivoted = df.melt(id_vars=id_vars, value_vars=milestone_cols, var_name='Milestone', value_name='Status')

# --- Step 4: Extract required columns from unpivoted data ---
def extract_f_a(milestone_str):
    match = re.search(r'V:\((F|A)', milestone_str)
    return 'Forecast' if match and match.group(1) == 'F' else 'Actual'

milestone_mapping = {
    'Site Audit Walk Package Received-Finish': ('Site Audit Walk Package Received-Finish', 'Pre-Con - Site Walk'),
    'Ground Cabling BOM Received-Finish': ('Ground Cabling BOM Received-Finish\n Tower Cabling BOM Received-Finish', 'Pre-Con - Cable BOM and LE'),
    'Tower Cabling BOM Received-Finish': ('Ground Cabling BOM Received-Finish\n Tower Cabling BOM Received-Finish', 'Pre-Con - Cable BOM and LE - Tower'),
    '100% Construction Drawing Received-Finish': ('100% Construction Drawing Received-Finish', 'Pre-Con - Final Drawings'),
    'Billing Milestone 1 Complete-Finish': ('Billing Milestone 1 Complete', 'Pre-Con - Ms1 Rev Rec'),
    'Viaero Ground NTP Received-Finish': ('Viaero Ground NTP Received-Finish', 'Ground NTP'),
    'Ground Construction Complete-Finish': ('Ground Construction Complete-Finish', 'BBU - Ground Install (sites)'),
    'Billing Milestone 2 Complete-Finish': ('Billing Milestone 2 Complete', 'BBU - MS2 Rev Rec'),
    'Viaero Tower NTP Received-Finish': ('Viaero Tower NTP Received-Finish', 'Tower NTP'),
    'Tower Construction Start-Finish': ('Tower Construction Start', 'RRH - Tower CxS'),
    'Tower Installation Complete-Finish': ('Tower Installation Complete', 'RRH - Tower CxC'),
    'Billing Milestone 3 Complete-Finish': ('Billing Milestone 3 Complete', 'MS3 Rev Rec'),
    'Billing Milestone 4 Complete-Finish': ('Billing Milestone 4 Complete', 'MS4 Rev Rec'),
    'De-installed Equipment Return Completed-Finish': ('De-installed Equipment Return Completed', 'Cx Decom'),
    'Site Acceptance-Finish': ('Site Acceptance', 'MS5 - Final Site Acceptance'),
    'Billing Milestone 5 Complete-Finish': ('Billing Milestone 5 Complete', 'MS5 - Final Site Acceptance Rev Rec'),
    'SSV Submitted to Customer FWA-Finish': ('SSV Submitted to Customer FWA-Finish', 'MS4 - SSV Submitted - FWA'),
    'SSV Submitted to Customer Mobility-Finish': ('SSV Submitted to Customer Mobility-Finish', 'MS4 - SSV Submitted')
}

def extract_names(milestone_str):
    match = re.search(r'V:\((?:F|A) \d{4}\) (.+)', milestone_str)
    if match:
        milestone_name = match.group(1).strip()
    else:
        match = re.search(r'V:\((?:F|A)\) (.+)', milestone_str)
        if match:
            milestone_name = match.group(1).strip()
        else:
            milestone_name = milestone_str
    
    return milestone_mapping.get(milestone_name, (milestone_name, milestone_name))

df_unpivoted['F/A'] = df_unpivoted['Milestone'].apply(extract_f_a)
df_unpivoted[['Task Name', 'New name']] = df_unpivoted['Milestone'].apply(lambda x: pd.Series(extract_names(x)))
df_unpivoted['Weekly'] = df_unpivoted['New name']

# --- Step 5: Prepare data for weekly and monthly reports ---
df_unpivoted['Status'] = pd.to_datetime(df_unpivoted['Status'], errors='coerce')
df_unpivoted['Milestone_Count'] = 1

df_unpivoted['Week Label'] = 'Week ' + df_unpivoted['Status'].dt.isocalendar().week.fillna(0).astype(int).astype(str).replace('0', 'No Date')
df_unpivoted['Month'] = df_unpivoted['Status'].dt.strftime('%B %Y').fillna('No Date')
df_unpivoted['Milestone_Count'] = df_unpivoted['Milestone_Count'].fillna(0)

# --- Step 6: Create weekly and monthly reports using pivot tables ---
def sort_columns_by_date(df_pivot):
    """Sorts the columns of a pivot table chronologically."""
    def sort_key(col_tuple):
        if isinstance(col_tuple, tuple):
            month_str, week_str = col_tuple
            is_no_date = month_str == 'No Date'
        else:
            month_str = col_tuple
            is_no_date = month_str == 'No Date'
        
        if is_no_date:
            return (datetime.max.year, datetime.max.month, datetime.max.day, 999) # Sort 'No Date' at the end
        
        try:
            # Handle month-weekly tuples
            if isinstance(col_tuple, tuple):
                month_year_dt = datetime.strptime(month_str, '%B %Y')
                week_num = int(week_str.replace('Week ', ''))
                # A simple approximation for a week's date within a month
                return (month_year_dt.year, month_year_dt.month, week_num)
            else: # Handle monthly strings
                return (datetime.strptime(month_str, '%B %Y').year, datetime.strptime(month_str, '%B %Y').month)
        except ValueError:
            return (datetime.max.year, datetime.max.month, datetime.max.day, 999)

    sorted_cols = sorted(df_pivot.columns, key=sort_key)
    return df_pivot.reindex(columns=sorted_cols)

def get_all_weeks_in_year():
    """Generates all week labels for the current year."""
    all_weeks = []
    # Use the current year
    current_year = datetime.now().year
    
    # Iterate through all weeks of the year
    # A year has 52 or 53 weeks. Let's cover a few more to be safe.
    for week in range(1, 54):
        # A simple way to get a date for each week to get the month and year
        try:
            date_for_week = datetime.strptime(f'{current_year}-W{week}-1', "%Y-W%W-%w")
            month_label = date_for_week.strftime('%B %Y')
            week_label = f'Week {week}'
            all_weeks.append((month_label, week_label))
        except ValueError:
            # Skips non-existent week numbers (e.g., Week 53 on a non-53-week year)
            continue
    return all_weeks

# Get all possible week columns for the year
all_week_cols = get_all_weeks_in_year()

# Weekly Report
weekly_pivot = pd.pivot_table(
    df_unpivoted,
    values='Milestone_Count',
    index=['Weekly', 'F/A', 'Task Name', 'Milestone'],
    columns=['Month', 'Week Label'],
    aggfunc='sum',
    fill_value=0
)

# Add all missing weeks for the year with a value of 0
current_cols = set(weekly_pivot.columns)
missing_cols = [col for col in all_week_cols if col not in current_cols]
for col in missing_cols:
    weekly_pivot[col] = 0

final_weekly_report = sort_columns_by_date(weekly_pivot)

# Monthly Report
monthly_pivot = pd.pivot_table(
    df_unpivoted,
    values='Milestone_Count',
    index=['Weekly', 'F/A', 'Task Name', 'Milestone'],
    columns=['Month'],
    aggfunc='sum',
    fill_value=0
)
final_monthly_report = sort_columns_by_date(monthly_pivot)

# --- Create and add cumulative rows to reports ---
def add_cumulative_rows(df_report):
    df_cumulative = pd.DataFrame(index=df_report.index, columns=df_report.columns).fillna(0)
    for index, row in df_report.iterrows():
        cumulative_row = np.cumsum(row.values)
        df_cumulative.loc[index] = cumulative_row

    # Create new DataFrame for cumulative rows, now with 4 levels
    df_cumulative.index = pd.MultiIndex.from_tuples(
        [(f"{idx[0]} (Cumulative)", idx[1], idx[2], "") for idx in df_cumulative.index],
        names=['Weekly', 'F/A', 'Task Name', 'Milestone']
    )
    
    # Concatenate and sort
    final_df = pd.concat([df_report, df_cumulative]).sort_index()
    return final_df.sort_index(level=['Weekly', 'F/A'], sort_remaining=False)

final_weekly_report = add_cumulative_rows(final_weekly_report)
final_monthly_report = add_cumulative_rows(final_monthly_report)

# --- Step 7: Write reports to multi-sheet Excel file ---
today = datetime.today()
output_filename = r"Viaero_BMS_ProgressTracker_" + today.strftime("%m.%d.%y") + "_OV MS rev1.xlsx"
try:
    with pd.ExcelWriter(output_filename, engine='openpyxl') as writer:
        final_weekly_report.to_excel(writer, sheet_name='Weekly Report')
        final_monthly_report.to_excel(writer, sheet_name='Monthly Report')
    print(f"Report saved successfully to {output_filename}")
except Exception as e:
    print(f"Error writing to Excel file: {e}")

# --- Step 8: Pass a DataFrame back to Alteryx ---
final_weekly_report_flat = final_weekly_report.reset_index()
# Rename columns to a flat list for Alteryx, handling the MultiIndex
new_columns_weekly = ['Weekly', 'F/A', 'Task Name', 'Milestone'] + [f"{col[0]} - {col[1]}" for col in final_weekly_report.columns]
final_weekly_report_flat.columns = new_columns_weekly

final_monthly_report_flat = final_monthly_report.reset_index()
# Rename columns to a flat list for Alteryx
new_columns_monthly = ['Weekly', 'F/A', 'Task Name', 'Milestone'] + [col for col in final_monthly_report.columns]
final_monthly_report_flat.columns = new_columns_monthly

# Pass the weekly report to Alteryx output 1
Alteryx.write(final_weekly_report_flat, 1)

# Pass the monthly report to Alteryx output 2
Alteryx.write(final_monthly_report_flat, 2)


Code V3

# Import libraries
import pandas as pd
from datetime import datetime, timedelta
from ayx import Alteryx
import re
import warnings
import numpy as np
from calendar import monthrange

# Suppress the UserWarning from pandas about openpyxl
warnings.simplefilter(action='ignore', category=UserWarning)

# --- Step 2: Define file path and read data ---
file_path = r"\\netapp\depts\Jannat\Viaero\BMS_TrackerProgress.xlsx"
df = None

try:
    df = pd.read_excel(file_path, engine='openpyxl')
    print("File read successfully.")
except FileNotFoundError:
    print(f"Error: File not found at {file_path}")
    df = pd.DataFrame({'Error': ["File not found."]})
except Exception as e:
    print(f"Error reading file: {e}")
    df = pd.DataFrame({'Error': [f"File reading failed: {e}"]})

if 'Error' in df.columns:
    Alteryx.write(df, 1)
    exit()

# --- Step 3: Unpivot the milestone data ---
id_vars = [
    'CL:Customer Name', 'P:Viaero Root ID', 'C:Site Name (SPMS)',
    'WPK:Work Package Description', 'P:Project ID', 'C:Site ID',
    'P:Viaero Phase', 'P:Viaero Project Type', 'P:Cluster ID',
    'P:FWA (Existing)', 'P:FWA (Scope)', 'P:FWA (Final)',
    'P:Mobility (Existing)', 'P:Mobility (Scope)', 'P:Mobility (Final)',
    'M:Market', 'P:Project Class', 'P:Project Status'
]

milestone_cols = [col for col in df.columns if col.startswith('V:(')]
df_unpivoted = df.melt(id_vars=id_vars, value_vars=milestone_cols, var_name='Milestone', value_name='Status')

# --- Step 4: Extract required columns from unpivoted data ---
def extract_f_a(milestone_str):
    match = re.search(r'V:\((F|A)', milestone_str)
    return 'Forecast' if match and match.group(1) == 'F' else 'Actual'

milestone_mapping = {
    'Site Audit Walk Package Received-Finish': ('Site Audit Walk Package Received-Finish', 'Pre-Con - Site Walk'),
    'Ground Cabling BOM Received-Finish': ('Ground Cabling BOM Received-Finish\n Tower Cabling BOM Received-Finish', 'Pre-Con - Cable BOM and LE'),
    'Tower Cabling BOM Received-Finish': ('Ground Cabling BOM Received-Finish\n Tower Cabling BOM Received-Finish', 'Pre-Con - Cable BOM and LE - Tower'),
    '100% Construction Drawing Received-Finish': ('100% Construction Drawing Received-Finish', 'Pre-Con - Final Drawings'),
    'Billing Milestone 1 Complete-Finish': ('Billing Milestone 1 Complete', 'Pre-Con - Ms1 Rev Rec'),
    'Viaero Ground NTP Received-Finish': ('Viaero Ground NTP Received-Finish', 'Ground NTP'),
    'Ground Construction Complete-Finish': ('Ground Construction Complete-Finish', 'BBU - Ground Install (sites)'),
    'Billing Milestone 2 Complete-Finish': ('Billing Milestone 2 Complete', 'BBU - MS2 Rev Rec'),
    'Viaero Tower NTP Received-Finish': ('Viaero Tower NTP Received-Finish', 'Tower NTP'),
    'Tower Construction Start-Finish': ('Tower Construction Start', 'RRH - Tower CxS'),
    'Tower Installation Complete-Finish': ('Tower Installation Complete', 'RRH - Tower CxC'),
    'Billing Milestone 3 Complete-Finish': ('Billing Milestone 3 Complete', 'MS3 Rev Rec'),
    'Billing Milestone 4 Complete-Finish': ('Billing Milestone 4 Complete', 'MS4 Rev Rec'),
    'De-installed Equipment Return Completed-Finish': ('De-installed Equipment Return Completed', 'Cx Decom'),
    'Site Acceptance-Finish': ('Site Acceptance', 'MS5 - Final Site Acceptance'),
    'Billing Milestone 5 Complete-Finish': ('Billing Milestone 5 Complete', 'MS5 - Final Site Acceptance Rev Rec'),
    'SSV Submitted to Customer FWA-Finish': ('SSV Submitted to Customer FWA-Finish', 'MS4 - SSV Submitted - FWA'),
    'SSV Submitted to Customer Mobility-Finish': ('SSV Submitted to Customer Mobility-Finish', 'MS4 - SSV Submitted')
}

def extract_names(milestone_str):
    match = re.search(r'V:\((?:F|A) \d{4}\) (.+)', milestone_str)
    if match:
        milestone_name = match.group(1).strip()
    else:
        match = re.search(r'V:\((?:F|A)\) (.+)', milestone_str)
        if match:
            milestone_name = match.group(1).strip()
        else:
            milestone_name = milestone_str
    
    return milestone_mapping.get(milestone_name, (milestone_name, milestone_name))

df_unpivoted['F/A'] = df_unpivoted['Milestone'].apply(extract_f_a)
df_unpivoted[['Task Name', 'New name']] = df_unpivoted['Milestone'].apply(lambda x: pd.Series(extract_names(x)))
df_unpivoted['Weekly'] = df_unpivoted['New name']

# --- Step 5: Prepare data for weekly and monthly reports ---
df_unpivoted['Status'] = pd.to_datetime(df_unpivoted['Status'], errors='coerce')

# --- NEW LINE: Filter to show only data from 2025 ---
df_unpivoted = df_unpivoted[df_unpivoted['Status'].dt.year == 2025]

df_unpivoted['Milestone_Count'] = 1
df_unpivoted['Week Label'] = 'Week ' + df_unpivoted['Status'].dt.isocalendar().week.fillna(0).astype(int).astype(str).replace('0', 'No Date')
df_unpivoted['Month'] = df_unpivoted['Status'].dt.strftime('%B %Y').fillna('No Date')
df_unpivoted['Milestone_Count'] = df_unpivoted['Milestone_Count'].fillna(0)

# --- Step 6: Create weekly and monthly reports using pivot tables ---
def sort_columns_by_date(df_pivot):
    """Sorts the columns of a pivot table chronologically."""
    def sort_key(col_tuple):
        if isinstance(col_tuple, tuple):
            month_str, week_str = col_tuple
            is_no_date = month_str == 'No Date'
        else:
            month_str = col_tuple
            is_no_date = month_str == 'No Date'
        
        if is_no_date:
            return (datetime.max.year, datetime.max.month, datetime.max.day, 999)
        
        try:
            if isinstance(col_tuple, tuple):
                month_year_dt = datetime.strptime(month_str, '%B %Y')
                week_num = int(week_str.replace('Week ', ''))
                return (month_year_dt.year, month_year_dt.month, week_num)
            else:
                return (datetime.strptime(month_str, '%B %Y').year, datetime.strptime(month_str, '%B %Y').month)
        except ValueError:
            return (datetime.max.year, datetime.max.month, datetime.max.day, 999)

    sorted_cols = sorted(df_pivot.columns, key=sort_key)
    return df_pivot.reindex(columns=sorted_cols)

def get_all_weeks_in_year():
    """Generates all week labels for the current year."""
    all_weeks = []
    current_year = 2025  # Changed to explicitly use 2025
    
    for week in range(1, 54):
        try:
            date_for_week = datetime.strptime(f'{current_year}-W{week}-1', "%Y-W%W-%w")
            month_label = date_for_week.strftime('%B %Y')
            week_label = f'Week {week}'
            all_weeks.append((month_label, week_label))
        except ValueError:
            continue
    return all_weeks

# Get all possible week columns for the year
all_week_cols = get_all_weeks_in_year()

# Weekly Report
weekly_pivot = pd.pivot_table(
    df_unpivoted,
    values='Milestone_Count',
    index=['Weekly', 'F/A', 'Task Name', 'Milestone'],
    columns=['Month', 'Week Label'],
    aggfunc='sum',
    fill_value=0
)

current_cols = set(weekly_pivot.columns)
missing_cols = [col for col in all_week_cols if col not in current_cols]
for col in missing_cols:
    weekly_pivot[col] = 0

final_weekly_report = sort_columns_by_date(weekly_pivot)

# Monthly Report
monthly_pivot = pd.pivot_table(
    df_unpivoted,
    values='Milestone_Count',
    index=['Weekly', 'F/A', 'Task Name', 'Milestone'],
    columns=['Month'],
    aggfunc='sum',
    fill_value=0
)

# --- NEW LINE: Filter to show only data from 2025 for monthly report too ---
monthly_pivot = monthly_pivot.filter(like='2025', axis=1)

final_monthly_report = sort_columns_by_date(monthly_pivot)

# --- Create and add cumulative rows to reports ---
def add_cumulative_rows(df_report):
    df_cumulative = pd.DataFrame(index=df_report.index, columns=df_report.columns).fillna(0)
    for index, row in df_report.iterrows():
        cumulative_row = np.cumsum(row.values)
        df_cumulative.loc[index] = cumulative_row

    df_cumulative.index = pd.MultiIndex.from_tuples(
        [(f"{idx[0]} (Cumulative)", idx[1], idx[2], "") for idx in df_cumulative.index],
        names=['Weekly', 'F/A', 'Task Name', 'Milestone']
    )
    
    final_df = pd.concat([df_report, df_cumulative]).sort_index()
    return final_df.sort_index(level=['Weekly', 'F/A'], sort_remaining=False)

final_weekly_report = add_cumulative_rows(final_weekly_report)
final_monthly_report = add_cumulative_rows(final_monthly_report)

# --- Step 7: Write reports to multi-sheet Excel file ---
today = datetime.today()
output_filename = r"Viaero_BMS_ProgressTracker_" + today.strftime("%m.%d.%y") + "_OV MS rev1.xlsx"
try:
    with pd.ExcelWriter(output_filename, engine='openpyxl') as writer:
        final_weekly_report.to_excel(writer, sheet_name='Weekly Report')
        final_monthly_report.to_excel(writer, sheet_name='Monthly Report')
    print(f"Report saved successfully to {output_filename}")
except Exception as e:
    print(f"Error writing to Excel file: {e}")

# --- Step 8: Pass a DataFrame back to Alteryx ---
final_weekly_report_flat = final_weekly_report.reset_index()
new_columns_weekly = ['Weekly', 'F/A', 'Task Name', 'Milestone'] + [f"{col[0]} - {col[1]}" for col in final_weekly_report.columns]
final_weekly_report_flat.columns = new_columns_weekly

final_monthly_report_flat = final_monthly_report.reset_index()
new_columns_monthly = ['Weekly', 'F/A', 'Task Name', 'Milestone'] + [col for col in final_monthly_report.columns]
final_monthly_report_flat.columns = new_columns_monthly

Alteryx.write(final_weekly_report_flat, 1)
Alteryx.write(final_monthly_report_flat, 2)

Code V4.

# Import libraries
import pandas as pd
from datetime import datetime, timedelta
from ayx import Alteryx
import re
import warnings
import numpy as np
from calendar import monthrange

# Suppress the UserWarning from pandas about openpyxl
warnings.simplefilter(action='ignore', category=UserWarning)

# --- Step 2: Define file path and read data ---
file_path = r"\\netapp\depts\Jannat\Viaero\BMS_TrackerProgress.xlsx"
df = None

try:
    df = pd.read_excel(file_path, engine='openpyxl')
    print("File read successfully.")
except FileNotFoundError:
    print(f"Error: File not found at {file_path}")
    df = pd.DataFrame({'Error': ["File not found."]})
except Exception as e:
    print(f"Error reading file: {e}")
    df = pd.DataFrame({'Error': [f"File reading failed: {e}"]})

if 'Error' in df.columns:
    Alteryx.write(df, 1)
    exit()

# --- Step 3: Unpivot the milestone data ---
id_vars = [
    'CL:Customer Name', 'P:Viaero Root ID', 'C:Site Name (SPMS)',
    'WPK:Work Package Description', 'P:Project ID', 'C:Site ID',
    'P:Viaero Phase', 'P:Viaero Project Type', 'P:Cluster ID',
    'P:FWA (Existing)', 'P:FWA (Scope)', 'P:FWA (Final)',
    'P:Mobility (Existing)', 'P:Mobility (Scope)', 'P:Mobility (Final)',
    'M:Market', 'P:Project Class', 'P:Project Status'
]

milestone_cols = [col for col in df.columns if col.startswith('V:(')]
df_unpivoted = df.melt(id_vars=id_vars, value_vars=milestone_cols, var_name='Milestone', value_name='Status')

# --- Step 4: Extract required columns from unpivoted data ---
def extract_f_a(milestone_str):
    match = re.search(r'V:\((F|A)', milestone_str)
    return 'Forecast' if match and match.group(1) == 'F' else 'Actual'

milestone_mapping = {
    'Site Audit Walk Package Received-Finish': ('Site Audit Walk Package Received-Finish', 'Pre-Con - Site Walk'),
    'Ground Cabling BOM Received-Finish': ('Ground Cabling BOM Received-Finish\n Tower Cabling BOM Received-Finish', 'Pre-Con - Cable BOM and LE'),
    'Tower Cabling BOM Received-Finish': ('Ground Cabling BOM Received-Finish\n Tower Cabling BOM Received-Finish', 'Pre-Con - Cable BOM and LE - Tower'),
    '100% Construction Drawing Received-Finish': ('100% Construction Drawing Received-Finish', 'Pre-Con - Final Drawings'),
    'Billing Milestone 1 Complete-Finish': ('Billing Milestone 1 Complete', 'Pre-Con - Ms1 Rev Rec'),
    'Viaero Ground NTP Received-Finish': ('Viaero Ground NTP Received-Finish', 'Ground NTP'),
    'Ground Construction Complete-Finish': ('Ground Construction Complete-Finish', 'BBU - Ground Install (sites)'),
    'Billing Milestone 2 Complete-Finish': ('Billing Milestone 2 Complete', 'BBU - MS2 Rev Rec'),
    'Viaero Tower NTP Received-Finish': ('Viaero Tower NTP Received-Finish', 'Tower NTP'),
    'Tower Construction Start-Finish': ('Tower Construction Start', 'RRH - Tower CxS'),
    'Tower Installation Complete-Finish': ('Tower Installation Complete', 'RRH - Tower CxC'),
    'Billing Milestone 3 Complete-Finish': ('Billing Milestone 3 Complete', 'MS3 Rev Rec'),
    'Billing Milestone 4 Complete-Finish': ('Billing Milestone 4 Complete', 'MS4 Rev Rec'),
    'De-installed Equipment Return Completed-Finish': ('De-installed Equipment Return Completed', 'Cx Decom'),
    'Site Acceptance-Finish': ('Site Acceptance', 'MS5 - Final Site Acceptance'),
    'Billing Milestone 5 Complete-Finish': ('Billing Milestone 5 Complete', 'MS5 - Final Site Acceptance Rev Rec'),
    'SSV Submitted to Customer FWA-Finish': ('SSV Submitted to Customer FWA-Finish', 'MS4 - SSV Submitted - FWA'),
    'SSV Submitted to Customer Mobility-Finish': ('SSV Submitted to Customer Mobility-Finish', 'MS4 - SSV Submitted')
}

def extract_names(milestone_str):
    match = re.search(r'V:\((?:F|A) \d{4}\) (.+)', milestone_str)
    if match:
        milestone_name = match.group(1).strip()
    else:
        match = re.search(r'V:\((?:F|A)\) (.+)', milestone_str)
        if match:
            milestone_name = match.group(1).strip()
        else:
            milestone_name = milestone_str
    
    return milestone_mapping.get(milestone_name, (milestone_name, milestone_name))

df_unpivoted['F/A'] = df_unpivoted['Milestone'].apply(extract_f_a)
df_unpivoted[['Task Name', 'New name']] = df_unpivoted['Milestone'].apply(lambda x: pd.Series(extract_names(x)))
df_unpivoted['Weekly'] = df_unpivoted['New name']

# --- Step 5: Prepare data for weekly and monthly reports ---
df_unpivoted['Status'] = pd.to_datetime(df_unpivoted['Status'], errors='coerce')

# --- UPDATED LINE: Filter to show all data from 2025 onwards ---
df_unpivoted = df_unpivoted[df_unpivoted['Status'].dt.year >= 2025]

df_unpivoted['Milestone_Count'] = 1
df_unpivoted['Week Label'] = 'Week ' + df_unpivoted['Status'].dt.isocalendar().week.fillna(0).astype(int).astype(str).replace('0', 'No Date')
df_unpivoted['Month'] = df_unpivoted['Status'].dt.strftime('%B %Y').fillna('No Date')
df_unpivoted['Milestone_Count'] = df_unpivoted['Milestone_Count'].fillna(0)

# --- Step 6: Create weekly and monthly reports using pivot tables ---
def sort_columns_by_date(df_pivot):
    """Sorts the columns of a pivot table chronologically."""
    def sort_key(col_tuple):
        if isinstance(col_tuple, tuple):
            month_str, week_str = col_tuple
            is_no_date = month_str == 'No Date'
        else:
            month_str = col_tuple
            is_no_date = month_str == 'No Date'
        
        if is_no_date:
            return (datetime.max.year, datetime.max.month, datetime.max.day, 999)
        
        try:
            if isinstance(col_tuple, tuple):
                month_year_dt = datetime.strptime(month_str, '%B %Y')
                week_num = int(week_str.replace('Week ', ''))
                return (month_year_dt.year, month_year_dt.month, week_num)
            else:
                return (datetime.strptime(month_str, '%B %Y').year, datetime.strptime(month_str, '%B %Y').month)
        except ValueError:
            return (datetime.max.year, datetime.max.month, datetime.max.day, 999)

    sorted_cols = sorted(df_pivot.columns, key=sort_key)
    return df_pivot.reindex(columns=sorted_cols)

def get_all_weeks_in_year():
    """Generates all week labels for the current year."""
    all_weeks = []
    # Use the current year
    current_year = datetime.now().year
    
    for week in range(1, 54):
        try:
            date_for_week = datetime.strptime(f'{current_year}-W{week}-1', "%Y-W%W-%w")
            month_label = date_for_week.strftime('%B %Y')
            week_label = f'Week {week}'
            all_weeks.append((month_label, week_label))
        except ValueError:
            continue
    return all_weeks

# Get all possible week columns for the year
all_week_cols = get_all_weeks_in_year()

# Weekly Report
weekly_pivot = pd.pivot_table(
    df_unpivoted,
    values='Milestone_Count',
    index=['Weekly', 'F/A', 'Task Name', 'Milestone'],
    columns=['Month', 'Week Label'],
    aggfunc='sum',
    fill_value=0
)

current_cols = set(weekly_pivot.columns)
missing_cols = [col for col in all_week_cols if col not in current_cols]
for col in missing_cols:
    weekly_pivot[col] = 0

final_weekly_report = sort_columns_by_date(weekly_pivot)

# Monthly Report
monthly_pivot = pd.pivot_table(
    df_unpivoted,
    values='Milestone_Count',
    index=['Weekly', 'F/A', 'Task Name', 'Milestone'],
    columns=['Month'],
    aggfunc='sum',
    fill_value=0
)

# --- UPDATED LINE: Filter to show all data from 2025 onwards for monthly report too ---
final_monthly_report = sort_columns_by_date(monthly_pivot)
final_monthly_report = final_monthly_report.filter(like='2025', axis=1)

# --- Create and add cumulative rows to reports ---
def add_cumulative_rows(df_report):
    df_cumulative = pd.DataFrame(index=df_report.index, columns=df_report.columns).fillna(0)
    for index, row in df_report.iterrows():
        cumulative_row = np.cumsum(row.values)
        df_cumulative.loc[index] = cumulative_row

    df_cumulative.index = pd.MultiIndex.from_tuples(
        [(f"{idx[0]} (Cumulative)", idx[1], idx[2], "") for idx in df_cumulative.index],
        names=['Weekly', 'F/A', 'Task Name', 'Milestone']
    )
    
    final_df = pd.concat([df_report, df_cumulative]).sort_index()
    return final_df.sort_index(level=['Weekly', 'F/A'], sort_remaining=False)

final_weekly_report = add_cumulative_rows(final_weekly_report)
final_monthly_report = add_cumulative_rows(final_monthly_report)

# --- Step 7: Write reports to multi-sheet Excel file ---
today = datetime.today()
output_filename = r"Viaero_BMS_ProgressTracker_" + today.strftime("%m.%d.%y") + "_OV MS rev1.xlsx"
try:
    with pd.ExcelWriter(output_filename, engine='openpyxl') as writer:
        final_weekly_report.to_excel(writer, sheet_name='Weekly Report')
        final_monthly_report.to_excel(writer, sheet_name='Monthly Report')
    print(f"Report saved successfully to {output_filename}")
except Exception as e:
    print(f"Error writing to Excel file: {e}")

# --- Step 8: Pass a DataFrame back to Alteryx ---
final_weekly_report_flat = final_weekly_report.reset_index()
new_columns_weekly = ['Weekly', 'F/A', 'Task Name', 'Milestone'] + [f"{col[0]} - {col[1]}" for col in final_weekly_report.columns]
final_weekly_report_flat.columns = new_columns_weekly

final_monthly_report_flat = final_monthly_report.reset_index()
new_columns_monthly = ['Weekly', 'F/A', 'Task Name', 'Milestone'] + [col for col in final_monthly_report.columns]
final_monthly_report_flat.columns = new_columns_monthly

Alteryx.write(final_weekly_report_flat, 1)
Alteryx.write(final_monthly_report_flat, 2)

Code V5.

# Import libraries
import pandas as pd
from datetime import datetime, timedelta
from ayx import Alteryx
import re
import warnings
import numpy as np
from calendar import monthrange

# Suppress the UserWarning from pandas about openpyxl
warnings.simplefilter(action='ignore', category=UserWarning)

# --- Step 2: Define file path and read data ---
file_path = r"\\netapp\depts\Jannat\Viaero\BMS_TrackerProgress.xlsx"
df = None

try:
    df = pd.read_excel(file_path, engine='openpyxl')
    print("File read successfully.")
except FileNotFoundError:
    print(f"Error: File not found at {file_path}")
    df = pd.DataFrame({'Error': ["File not found."]})
except Exception as e:
    print(f"Error reading file: {e}")
    df = pd.DataFrame({'Error': [f"File reading failed: {e}"]})

if 'Error' in df.columns:
    Alteryx.write(df, 1)
    exit()

# --- Step 3: Unpivot the milestone data ---
id_vars = [
    'CL:Customer Name', 'P:Viaero Root ID', 'C:Site Name (SPMS)',
    'WPK:Work Package Description', 'P:Project ID', 'C:Site ID',
    'P:Viaero Phase', 'P:Viaero Project Type', 'P:Cluster ID',
    'P:FWA (Existing)', 'P:FWA (Scope)', 'P:FWA (Final)',
    'P:Mobility (Existing)', 'P:Mobility (Scope)', 'P:Mobility (Final)',
    'M:Market', 'P:Project Class', 'P:Project Status'
]

milestone_cols = [col for col in df.columns if col.startswith('V:(')]
df_unpivoted = df.melt(id_vars=id_vars, value_vars=milestone_cols, var_name='Milestone', value_name='Status')

# --- Step 4: Extract required columns from unpivoted data ---
def extract_f_a(milestone_str):
    match = re.search(r'V:\((F|A)', milestone_str)
    return 'Forecast' if match and match.group(1) == 'F' else 'Actual'

milestone_mapping = {
    'Site Audit Walk Package Received-Finish': ('Site Audit Walk Package Received-Finish', 'Pre-Con - Site Walk'),
    'Ground Cabling BOM Received-Finish': ('Ground Cabling BOM Received-Finish\n Tower Cabling BOM Received-Finish', 'Pre-Con - Cable BOM and LE'),
    'Tower Cabling BOM Received-Finish': ('Ground Cabling BOM Received-Finish\n Tower Cabling BOM Received-Finish', 'Pre-Con - Cable BOM and LE - Tower'),
    '100% Construction Drawing Received-Finish': ('100% Construction Drawing Received-Finish', 'Pre-Con - Final Drawings'),
    'Billing Milestone 1 Complete-Finish': ('Billing Milestone 1 Complete', 'Pre-Con - Ms1 Rev Rec'),
    'Viaero Ground NTP Received-Finish': ('Viaero Ground NTP Received-Finish', 'Ground NTP'),
    'Ground Construction Complete-Finish': ('Ground Construction Complete-Finish', 'BBU - Ground Install (sites)'),
    'Billing Milestone 2 Complete-Finish': ('Billing Milestone 2 Complete', 'BBU - MS2 Rev Rec'),
    'Viaero Tower NTP Received-Finish': ('Viaero Tower NTP Received-Finish', 'Tower NTP'),
    'Tower Construction Start-Finish': ('Tower Construction Start', 'RRH - Tower CxS'),
    'Tower Installation Complete-Finish': ('Tower Installation Complete', 'RRH - Tower CxC'),
    'Billing Milestone 3 Complete-Finish': ('Billing Milestone 3 Complete', 'MS3 Rev Rec'),
    'Billing Milestone 4 Complete-Finish': ('Billing Milestone 4 Complete', 'MS4 Rev Rec'),
    'De-installed Equipment Return Completed-Finish': ('De-installed Equipment Return Completed', 'Cx Decom'),
    'Site Acceptance-Finish': ('Site Acceptance', 'MS5 - Final Site Acceptance'),
    'Billing Milestone 5 Complete-Finish': ('Billing Milestone 5 Complete', 'MS5 - Final Site Acceptance Rev Rec'),
    'SSV Submitted to Customer FWA-Finish': ('SSV Submitted to Customer FWA-Finish', 'MS4 - SSV Submitted - FWA'),
    'SSV Submitted to Customer Mobility-Finish': ('SSV Submitted to Customer Mobility-Finish', 'MS4 - SSV Submitted')
}

def extract_names(milestone_str):
    match = re.search(r'V:\((?:F|A) \d{4}\) (.+)', milestone_str)
    if match:
        milestone_name = match.group(1).strip()
    else:
        match = re.search(r'V:\((?:F|A)\) (.+)', milestone_str)
        if match:
            milestone_name = match.group(1).strip()
        else:
            milestone_name = milestone_str
    
    return milestone_mapping.get(milestone_name, (milestone_name, milestone_name))

df_unpivoted['F/A'] = df_unpivoted['Milestone'].apply(extract_f_a)
df_unpivoted[['Task Name', 'New name']] = df_unpivoted['Milestone'].apply(lambda x: pd.Series(extract_names(x)))
df_unpivoted['Weekly'] = df_unpivoted['New name']

# --- Step 5: Prepare data for weekly and monthly reports ---
df_unpivoted['Status'] = pd.to_datetime(df_unpivoted['Status'], errors='coerce')

# Filter to show all data from 2025 onwards
df_unpivoted = df_unpivoted[df_unpivoted['Status'].dt.year >= 2025]

df_unpivoted['Milestone_Count'] = 1
df_unpivoted['Week Label'] = 'Week ' + df_unpivoted['Status'].dt.isocalendar().week.fillna(0).astype(int).astype(str).replace('0', 'No Date')
df_unpivoted['Month'] = df_unpivoted['Status'].dt.strftime('%B %Y').fillna('No Date')
df_unpivoted['Milestone_Count'] = df_unpivoted['Milestone_Count'].fillna(0)

# --- Step 6: Create weekly and monthly reports using pivot tables ---
def sort_columns_by_date(df_pivot):
    """Sorts the columns of a pivot table chronologically."""
    def sort_key(col_tuple):
        if isinstance(col_tuple, tuple):
            month_str, week_str = col_tuple
            is_no_date = month_str == 'No Date'
        else:
            month_str = col_tuple
            is_no_date = month_str == 'No Date'
        
        if is_no_date:
            return (datetime.max.year, datetime.max.month, datetime.max.day, 999)
        
        try:
            if isinstance(col_tuple, tuple):
                month_year_dt = datetime.strptime(month_str, '%B %Y')
                week_num = int(week_str.replace('Week ', ''))
                return (month_year_dt.year, month_year_dt.month, week_num)
            else:
                return (datetime.strptime(month_str, '%B %Y').year, datetime.strptime(month_str, '%B %Y').month)
        except ValueError:
            return (datetime.max.year, datetime.max.month, datetime.max.day, 999)

    sorted_cols = sorted(df_pivot.columns, key=sort_key)
    return df_pivot.reindex(columns=sorted_cols)

def get_all_weeks_in_year():
    """Generates all week labels for the current year."""
    all_weeks = []
    current_year = datetime.now().year
    
    for week in range(1, 54):
        try:
            date_for_week = datetime.strptime(f'{current_year}-W{week}-1', "%Y-W%W-%w")
            month_label = date_for_week.strftime('%B %Y')
            week_label = f'Week {week}'
            all_weeks.append((month_label, week_label))
        except ValueError:
            continue
    return all_weeks

# Get all possible week columns for the year
all_week_cols = get_all_weeks_in_year()

# Weekly Report
weekly_pivot = pd.pivot_table(
    df_unpivoted,
    values='Milestone_Count',
    index=['Weekly', 'F/A', 'Task Name', 'Milestone'],
    columns=['Month', 'Week Label'],
    aggfunc='sum',
    fill_value=0
)

current_cols = set(weekly_pivot.columns)
missing_cols = [col for col in all_week_cols if col not in current_cols]
for col in missing_cols:
    weekly_pivot[col] = 0

final_weekly_report = sort_columns_by_date(weekly_pivot)

# Monthly Report
monthly_pivot = pd.pivot_table(
    df_unpivoted,
    values='Milestone_Count',
    index=['Weekly', 'F/A', 'Task Name', 'Milestone'],
    columns=['Month'],
    aggfunc='sum',
    fill_value=0
)

# --- REMOVED THE FOLLOWING LINE:
# final_monthly_report = final_monthly_report.filter(like='2025', axis=1)

final_monthly_report = sort_columns_by_date(monthly_pivot)

# --- Create and add cumulative rows to reports ---
def add_cumulative_rows(df_report):
    df_cumulative = pd.DataFrame(index=df_report.index, columns=df_report.columns).fillna(0)
    for index, row in df_report.iterrows():
        cumulative_row = np.cumsum(row.values)
        df_cumulative.loc[index] = cumulative_row

    df_cumulative.index = pd.MultiIndex.from_tuples(
        [(f"{idx[0]} (Cumulative)", idx[1], idx[2], "") for idx in df_cumulative.index],
        names=['Weekly', 'F/A', 'Task Name', 'Milestone']
    )
    
    final_df = pd.concat([df_report, df_cumulative]).sort_index()
    return final_df.sort_index(level=['Weekly', 'F/A'], sort_remaining=False)

final_weekly_report = add_cumulative_rows(final_weekly_report)
final_monthly_report = add_cumulative_rows(final_monthly_report)

# --- Step 7: Write reports to multi-sheet Excel file ---
today = datetime.today()
output_filename = r"Viaero_BMS_ProgressTracker_" + today.strftime("%m.%d.%y") + "_OV MS rev1.xlsx"
try:
    with pd.ExcelWriter(output_filename, engine='openpyxl') as writer:
        final_weekly_report.to_excel(writer, sheet_name='Weekly Report')
        final_monthly_report.to_excel(writer, sheet_name='Monthly Report')
    print(f"Report saved successfully to {output_filename}")
except Exception as e:
    print(f"Error writing to Excel file: {e}")

# --- Step 8: Pass a DataFrame back to Alteryx ---
final_weekly_report_flat = final_weekly_report.reset_index()
new_columns_weekly = ['Weekly', 'F/A', 'Task Name', 'Milestone'] + [f"{col[0]} - {col[1]}" for col in final_weekly_report.columns]
final_weekly_report_flat.columns = new_columns_weekly

final_monthly_report_flat = final_monthly_report.reset_index()
new_columns_monthly = ['Weekly', 'F/A', 'Task Name', 'Milestone'] + [col for col in final_monthly_report.columns]
final_monthly_report_flat.columns = new_columns_monthly

Alteryx.write(final_weekly_report_flat, 1)
Alteryx.write(final_monthly_report_flat, 2)

Code V6.
# Import libraries
import pandas as pd
from datetime import datetime, timedelta
from ayx import Alteryx
import re
import warnings
import numpy as np
from calendar import monthrange

# Suppress the UserWarning from pandas about openpyxl
warnings.simplefilter(action='ignore', category=UserWarning)

# --- Step 2: Define file path and read data ---
file_path = r"\\netapp\depts\Jannat\Viaero\BMS_TrackerProgress.xlsx"
df = None

try:
    df = pd.read_excel(file_path, engine='openpyxl')
    print("File read successfully.")
except FileNotFoundError:
    print(f"Error: File not found at {file_path}")
    df = pd.DataFrame({'Error': ["File not found."]})
except Exception as e:
    print(f"Error reading file: {e}")
    df = pd.DataFrame({'Error': [f"File reading failed: {e}"]})

if 'Error' in df.columns:
    Alteryx.write(df, 1)
    exit()

# --- Step 3: Unpivot the milestone data ---
id_vars = [
    'CL:Customer Name', 'P:Viaero Root ID', 'C:Site Name (SPMS)',
    'WPK:Work Package Description', 'P:Project ID', 'C:Site ID',
    'P:Viaero Phase', 'P:Viaero Project Type', 'P:Cluster ID',
    'P:FWA (Existing)', 'P:FWA (Scope)', 'P:FWA (Final)',
    'P:Mobility (Existing)', 'P:Mobility (Scope)', 'P:Mobility (Final)',
    'M:Market', 'P:Project Class', 'P:Project Status'
]

milestone_cols = [col for col in df.columns if col.startswith('V:(')]
df_unpivoted = df.melt(id_vars=id_vars, value_vars=milestone_cols, var_name='Milestone', value_name='Status')

# --- Step 4: Extract required columns from unpivoted data ---
def extract_f_a(milestone_str):
    match = re.search(r'V:\((F|A)', milestone_str)
    return 'Forecast' if match and match.group(1) == 'F' else 'Actual'

milestone_mapping = {
    'Site Audit Walk Package Received-Finish': ('Site Audit Walk Package Received-Finish', 'Pre-Con - Site Walk'),
    'Ground Cabling BOM Received-Finish': ('Ground Cabling BOM Received-Finish\n Tower Cabling BOM Received-Finish', 'Pre-Con - Cable BOM and LE'),
    'Tower Cabling BOM Received-Finish': ('Ground Cabling BOM Received-Finish\n Tower Cabling BOM Received-Finish', 'Pre-Con - Cable BOM and LE - Tower'),
    '100% Construction Drawing Received-Finish': ('100% Construction Drawing Received-Finish', 'Pre-Con - Final Drawings'),
    'Billing Milestone 1 Complete-Finish': ('Billing Milestone 1 Complete', 'Pre-Con - Ms1 Rev Rec'),
    'Viaero Ground NTP Received-Finish': ('Viaero Ground NTP Received-Finish', 'Ground NTP'),
    'Ground Construction Complete-Finish': ('Ground Construction Complete-Finish', 'BBU - Ground Install (sites)'),
    'Billing Milestone 2 Complete-Finish': ('Billing Milestone 2 Complete', 'BBU - MS2 Rev Rec'),
    'Viaero Tower NTP Received-Finish': ('Viaero Tower NTP Received-Finish', 'Tower NTP'),
    'Tower Construction Start-Finish': ('Tower Construction Start', 'RRH - Tower CxS'),
    'Tower Installation Complete-Finish': ('Tower Installation Complete', 'RRH - Tower CxC'),
    'Billing Milestone 3 Complete-Finish': ('Billing Milestone 3 Complete', 'MS3 Rev Rec'),
    'Billing Milestone 4 Complete-Finish': ('Billing Milestone 4 Complete', 'MS4 Rev Rec'),
    'De-installed Equipment Return Completed-Finish': ('De-installed Equipment Return Completed', 'Cx Decom'),
    'Site Acceptance-Finish': ('Site Acceptance', 'MS5 - Final Site Acceptance'),
    'Billing Milestone 5 Complete-Finish': ('Billing Milestone 5 Complete', 'MS5 - Final Site Acceptance Rev Rec'),
    'SSV Submitted to Customer FWA-Finish': ('SSV Submitted to Customer FWA-Finish', 'MS4 - SSV Submitted - FWA'),
    'SSV Submitted to Customer Mobility-Finish': ('SSV Submitted to Customer Mobility-Finish', 'MS4 - SSV Submitted')
}

def extract_names(milestone_str):
    match = re.search(r'V:\((?:F|A) \d{4}\) (.+)', milestone_str)
    if match:
        milestone_name = match.group(1).strip()
    else:
        match = re.search(r'V:\((?:F|A)\) (.+)', milestone_str)
        if match:
            milestone_name = match.group(1).strip()
        else:
            milestone_name = milestone_str
    
    return milestone_mapping.get(milestone_name, (milestone_name, milestone_name))

df_unpivoted['F/A'] = df_unpivoted['Milestone'].apply(extract_f_a)
df_unpivoted[['Task Name', 'New name']] = df_unpivoted['Milestone'].apply(lambda x: pd.Series(extract_names(x)))
df_unpivoted['Weekly'] = df_unpivoted['New name']

# --- Step 5: Prepare data for weekly and monthly reports ---
df_unpivoted['Status'] = pd.to_datetime(df_unpivoted['Status'], errors='coerce')

# Filter to show all data from 2025 onwards
df_unpivoted = df_unpivoted[df_unpivoted['Status'].dt.year >= 2025]

df_unpivoted['Milestone_Count'] = 1
df_unpivoted['Week Label'] = 'Week ' + df_unpivoted['Status'].dt.isocalendar().week.fillna(0).astype(int).astype(str).replace('0', 'No Date')
df_unpivoted['Month'] = df_unpivoted['Status'].dt.strftime('%B %Y').fillna('No Date')
df_unpivoted['Milestone_Count'] = df_unpivoted['Milestone_Count'].fillna(0)

# --- Step 6: Create weekly and monthly reports using pivot tables ---
def sort_columns_by_date(df_pivot):
    """Sorts the columns of a pivot table chronologically."""
    def sort_key(col):
        if isinstance(col, tuple):
            # Handles Weekly columns (Month, Week Label)
            month_str, week_str = col
            is_no_date = month_str == 'No Date'
        else:
            # Handles Monthly columns (Month)
            month_str = col
            is_no_date = month_str == 'No Date'
        
        if is_no_date:
            return (datetime.max.year, datetime.max.month, datetime.max.day, 999)
        
        try:
            if isinstance(col, tuple):
                month_year_dt = datetime.strptime(month_str, '%B %Y')
                week_num = int(week_str.replace('Week ', ''))
                return (month_year_dt.year, month_year_dt.month, week_num)
            else:
                return (datetime.strptime(month_str, '%B %Y').year, datetime.strptime(month_str, '%B %Y').month)
        except ValueError:
            return (datetime.max.year, datetime.max.month, datetime.max.day, 999)

    sorted_cols = sorted(df_pivot.columns, key=sort_key)
    return df_pivot.reindex(columns=sorted_cols)

def get_all_weeks_in_year():
    """Generates all week labels for the current year."""
    all_weeks = []
    current_year = datetime.now().year
    
    for week in range(1, 54):
        try:
            date_for_week = datetime.strptime(f'{current_year}-W{week}-1', "%Y-W%W-%w")
            month_label = date_for_week.strftime('%B %Y')
            week_label = f'Week {week}'
            all_weeks.append((month_label, week_label))
        except ValueError:
            continue
    return all_weeks

all_week_cols = get_all_weeks_in_year()

# Weekly Report
weekly_pivot = pd.pivot_table(
    df_unpivoted,
    values='Milestone_Count',
    index=['Weekly', 'F/A', 'Task Name', 'Milestone'],
    columns=['Month', 'Week Label'],
    aggfunc='sum',
    fill_value=0
)

current_cols = set(weekly_pivot.columns)
missing_cols = [col for col in all_week_cols if col not in current_cols]
for col in missing_cols:
    weekly_pivot[col] = 0

final_weekly_report = sort_columns_by_date(weekly_pivot)

# Monthly Report
monthly_pivot = pd.pivot_table(
    df_unpivoted,
    values='Milestone_Count',
    index=['Weekly', 'F/A', 'Task Name', 'Milestone'],
    columns=['Month'],
    aggfunc='sum',
    fill_value=0
)

final_monthly_report = sort_columns_by_date(monthly_pivot)

# --- Create and add cumulative rows to reports ---
def add_cumulative_rows(df_report):
    df_cumulative = pd.DataFrame(index=df_report.index, columns=df_report.columns).fillna(0)
    for index, row in df_report.iterrows():
        cumulative_row = np.cumsum(row.values)
        df_cumulative.loc[index] = cumulative_row

    df_cumulative.index = pd.MultiIndex.from_tuples(
        [(f"{idx[0]} (Cumulative)", idx[1], idx[2], "") for idx in df_cumulative.index],
        names=['Weekly', 'F/A', 'Task Name', 'Milestone']
    )
    
    final_df = pd.concat([df_report, df_cumulative]).sort_index()
    return final_df.sort_index(level=['Weekly', 'F/A'], sort_remaining=False)

final_weekly_report = add_cumulative_rows(final_weekly_report)
final_monthly_report = add_cumulative_rows(final_monthly_report)

# --- Step 7: Write reports to multi-sheet Excel file ---
today = datetime.today()
output_filename = r"Viaero_BMS_ProgressTracker_" + today.strftime("%m.%d.%y") + "_OV MS rev1.xlsx"
try:
    with pd.ExcelWriter(output_filename, engine='openpyxl') as writer:
        final_weekly_report.to_excel(writer, sheet_name='Weekly Report')
        final_monthly_report.to_excel(writer, sheet_name='Monthly Report')
    print(f"Report saved successfully to {output_filename}")
except Exception as e:
    print(f"Error writing to Excel file: {e}")

# --- Step 8: Pass a DataFrame back to Alteryx ---
final_weekly_report_flat = final_weekly_report.reset_index()
new_columns_weekly = ['Weekly', 'F/A', 'Task Name', 'Milestone'] + [f"{col[0]} - {col[1]}" for col in final_weekly_report.columns]
final_weekly_report_flat.columns = new_columns_weekly

final_monthly_report_flat = final_monthly_report.reset_index()
new_columns_monthly = ['Weekly', 'F/A', 'Task Name', 'Milestone'] + [col for col in final_monthly_report.columns]
final_monthly_report_flat.columns = new_columns_monthly

Alteryx.write(final_weekly_report_flat, 1)
Alteryx.write(final_monthly_report_flat, 2)

Code V7.

# Import libraries
import pandas as pd
from datetime import datetime, timedelta
from ayx import Alteryx
import re
import warnings
import numpy as np
from calendar import monthrange

# Suppress the UserWarning from pandas about openpyxl
warnings.simplefilter(action='ignore', category=UserWarning)

# --- Step 2: Define file path and read data ---
file_path = r"\\netapp\depts\Jannat\Viaero\BMS_TrackerProgress.xlsx"
df = None

try:
    df = pd.read_excel(file_path, engine='openpyxl')
    print("File read successfully.")
except FileNotFoundError:
    print(f"Error: File not found at {file_path}")
    df = pd.DataFrame({'Error': ["File not found."]})
except Exception as e:
    print(f"Error reading file: {e}")
    df = pd.DataFrame({'Error': [f"File reading failed: {e}"]})

if 'Error' in df.columns:
    Alteryx.write(df, 1)
    exit()

# --- Step 3: Unpivot the milestone data ---
id_vars = [
    'CL:Customer Name', 'P:Viaero Root ID', 'C:Site Name (SPMS)',
    'WPK:Work Package Description', 'P:Project ID', 'C:Site ID',
    'P:Viaero Phase', 'P:Viaero Project Type', 'P:Cluster ID',
    'P:FWA (Existing)', 'P:FWA (Scope)', 'P:FWA (Final)',
    'P:Mobility (Existing)', 'P:Mobility (Scope)', 'P:Mobility (Final)',
    'M:Market', 'P:Project Class', 'P:Project Status'
]

milestone_cols = [col for col in df.columns if col.startswith('V:(')]
df_unpivoted = df.melt(id_vars=id_vars, value_vars=milestone_cols, var_name='Milestone', value_name='Status')

# --- Step 4: Extract required columns from unpivoted data ---
def extract_f_a(milestone_str):
    match = re.search(r'V:\((F|A)', milestone_str)
    return 'Forecast' if match and match.group(1) == 'F' else 'Actual'

milestone_mapping = {
    'Site Audit Walk Package Received-Finish': ('Site Audit Walk Package Received-Finish', 'Pre-Con - Site Walk'),
    'Ground Cabling BOM Received-Finish': ('Ground Cabling BOM Received-Finish\n Tower Cabling BOM Received-Finish', 'Pre-Con - Cable BOM and LE'),
    'Tower Cabling BOM Received-Finish': ('Ground Cabling BOM Received-Finish\n Tower Cabling BOM Received-Finish', 'Pre-Con - Cable BOM and LE - Tower'),
    '100% Construction Drawing Received-Finish': ('100% Construction Drawing Received-Finish', 'Pre-Con - Final Drawings'),
    'Billing Milestone 1 Complete-Finish': ('Billing Milestone 1 Complete', 'Pre-Con - Ms1 Rev Rec'),
    'Viaero Ground NTP Received-Finish': ('Viaero Ground NTP Received-Finish', 'Ground NTP'),
    'Ground Construction Complete-Finish': ('Ground Construction Complete-Finish', 'BBU - Ground Install (sites)'),
    'Billing Milestone 2 Complete-Finish': ('Billing Milestone 2 Complete', 'BBU - MS2 Rev Rec'),
    'Viaero Tower NTP Received-Finish': ('Viaero Tower NTP Received-Finish', 'Tower NTP'),
    'Tower Construction Start-Finish': ('Tower Construction Start', 'RRH - Tower CxS'),
    'Tower Installation Complete-Finish': ('Tower Installation Complete', 'RRH - Tower CxC'),
    'Billing Milestone 3 Complete-Finish': ('Billing Milestone 3 Complete', 'MS3 Rev Rec'),
    'Billing Milestone 4 Complete-Finish': ('Billing Milestone 4 Complete', 'MS4 Rev Rec'),
    'De-installed Equipment Return Completed-Finish': ('De-installed Equipment Return Completed', 'Cx Decom'),
    'Site Acceptance-Finish': ('Site Acceptance', 'MS5 - Final Site Acceptance'),
    'Billing Milestone 5 Complete-Finish': ('Billing Milestone 5 Complete', 'MS5 - Final Site Acceptance Rev Rec'),
    'SSV Submitted to Customer FWA-Finish': ('SSV Submitted to Customer FWA-Finish', 'MS4 - SSV Submitted - FWA'),
    'SSV Submitted to Customer Mobility-Finish': ('SSV Submitted to Customer Mobility-Finish', 'MS4 - SSV Submitted')
}

def extract_names(milestone_str):
    match = re.search(r'V:\((?:F|A) \d{4}\) (.+)', milestone_str)
    if match:
        milestone_name = match.group(1).strip()
    else:
        match = re.search(r'V:\((?:F|A)\) (.+)', milestone_str)
        if match:
            milestone_name = match.group(1).strip()
        else:
            milestone_name = milestone_str
    
    return milestone_mapping.get(milestone_name, (milestone_name, milestone_name))

df_unpivoted['F/A'] = df_unpivoted['Milestone'].apply(extract_f_a)
df_unpivoted[['Task Name', 'New name']] = df_unpivoted['Milestone'].apply(lambda x: pd.Series(extract_names(x)))
df_unpivoted['Weekly'] = df_unpivoted['New name']

# --- Step 5: Prepare data for weekly and monthly reports ---
df_unpivoted['Status'] = pd.to_datetime(df_unpivoted['Status'], errors='coerce')

# Filter to show all data from 2025 onwards
df_unpivoted = df_unpivoted[df_unpivoted['Status'].dt.year >= 2025]

df_unpivoted['Milestone_Count'] = 1
df_unpivoted['Week Label'] = 'Week ' + df_unpivoted['Status'].dt.isocalendar().week.fillna(0).astype(int).astype(str).replace('0', 'No Date')
df_unpivoted['Month'] = df_unpivoted['Status'].dt.strftime('%B %Y').fillna('No Date')
df_unpivoted['Milestone_Count'] = df_unpivoted['Milestone_Count'].fillna(0)

# --- Step 6: Create weekly and monthly reports using pivot tables ---
def sort_monthly_columns(df_pivot):
    """Sorts monthly columns in chronological order."""
    cols = [col for col in df_pivot.columns if col != 'No Date']
    # Create a sort key using datetime objects
    sorted_cols = sorted(cols, key=lambda x: datetime.strptime(x, '%B %Y'))
    # Add 'No Date' back to the end
    if 'No Date' in df_pivot.columns:
        sorted_cols.append('No Date')
    return df_pivot.reindex(columns=sorted_cols)

def sort_weekly_columns(df_pivot):
    """Sorts weekly columns in chronological order."""
    cols = [col for col in df_pivot.columns if 'No Date' not in col]
    sorted_cols = sorted(cols, key=lambda x: datetime.strptime(f'{x[0]} - {x[1].replace("Week ", "")}-1', '%B %Y - %W-%w'))
    
    if ('No Date', 'No Date') in df_pivot.columns:
        sorted_cols.append(('No Date', 'No Date'))
    return df_pivot.reindex(columns=sorted_cols)

# Weekly Report
weekly_pivot = pd.pivot_table(
    df_unpivoted,
    values='Milestone_Count',
    index=['Weekly', 'F/A', 'Task Name', 'Milestone'],
    columns=['Month', 'Week Label'],
    aggfunc='sum',
    fill_value=0
)

all_years = sorted(df_unpivoted['Status'].dt.year.dropna().unique())
all_week_cols = []
for year in all_years:
    for week in range(1, 54):
        try:
            date_for_week = datetime.strptime(f'{year}-W{week}-1', "%Y-W%W-%w")
            month_label = date_for_week.strftime('%B %Y')
            week_label = f'Week {week}'
            all_week_cols.append((month_label, week_label))
        except ValueError:
            continue

current_cols = set(weekly_pivot.columns)
missing_cols = [col for col in all_week_cols if col not in current_cols]
for col in missing_cols:
    weekly_pivot[col] = 0

final_weekly_report = sort_weekly_columns(weekly_pivot)

# Monthly Report
monthly_pivot = pd.pivot_table(
    df_unpivoted,
    values='Milestone_Count',
    index=['Weekly', 'F/A', 'Task Name', 'Milestone'],
    columns=['Month'],
    aggfunc='sum',
    fill_value=0
)

final_monthly_report = sort_monthly_columns(monthly_pivot)

# --- Create and add cumulative rows to reports ---
def add_cumulative_rows(df_report):
    df_cumulative = pd.DataFrame(index=df_report.index, columns=df_report.columns).fillna(0)
    for index, row in df_report.iterrows():
        cumulative_row = np.cumsum(row.values)
        df_cumulative.loc[index] = cumulative_row

    df_cumulative.index = pd.MultiIndex.from_tuples(
        [(f"{idx[0]} (Cumulative)", idx[1], idx[2], "") for idx in df_cumulative.index],
        names=['Weekly', 'F/A', 'Task Name', 'Milestone']
    )
    
    final_df = pd.concat([df_report, df_cumulative]).sort_index()
    return final_df.sort_index(level=['Weekly', 'F/A'], sort_remaining=False)

final_weekly_report = add_cumulative_rows(final_weekly_report)
final_monthly_report = add_cumulative_rows(final_monthly_report)

# --- Step 7: Write reports to multi-sheet Excel file ---
today = datetime.today()
output_filename = r"Viaero_BMS_ProgressTracker_" + today.strftime("%m.%d.%y") + "_OV MS rev1.xlsx"
try:
    with pd.ExcelWriter(output_filename, engine='openpyxl') as writer:
        final_weekly_report.to_excel(writer, sheet_name='Weekly Report')
        final_monthly_report.to_excel(writer, sheet_name='Monthly Report')
    print(f"Report saved successfully to {output_filename}")
except Exception as e:
    print(f"Error writing to Excel file: {e}")

# --- Step 8: Pass a DataFrame back to Alteryx ---
final_weekly_report_flat = final_weekly_report.reset_index()
new_columns_weekly = ['Weekly', 'F/A', 'Task Name', 'Milestone'] + [f"{col[0]} - {col[1]}" for col in final_weekly_report.columns]
final_weekly_report_flat.columns = new_columns_weekly

final_monthly_report_flat = final_monthly_report.reset_index()
new_columns_monthly = ['Weekly', 'F/A', 'Task Name', 'Milestone'] + [col for col in final_monthly_report.columns]
final_monthly_report_flat.columns = new_columns_monthly

Alteryx.write(final_weekly_report_flat, 1)
Alteryx.write(final_monthly_report_flat, 2)

Code v8.


# Import libraries
import pandas as pd
from datetime import datetime, timedelta
from ayx import Alteryx
import re
import warnings
import numpy as np
from calendar import monthrange

# Suppress the UserWarning from pandas about openpyxl
warnings.simplefilter(action='ignore', category=UserWarning)

# --- Step 2: Define file path and read data ---
file_path = r"\\netapp\depts\Jannat\Viaero\BMS_TrackerProgress.xlsx"
df = None

try:
    df = pd.read_excel(file_path, engine='openpyxl')
    print("File read successfully.")
except FileNotFoundError:
    print(f"Error: File not found at {file_path}")
    df = pd.DataFrame({'Error': ["File not found."]})
except Exception as e:
    print(f"Error reading file: {e}")
    df = pd.DataFrame({'Error': [f"File reading failed: {e}"]})

if 'Error' in df.columns:
    Alteryx.write(df, 1)
    exit()

# --- Step 3: Unpivot the milestone data ---
id_vars = [
    'CL:Customer Name', 'P:Viaero Root ID', 'C:Site Name (SPMS)',
    'WPK:Work Package Description', 'P:Project ID', 'C:Site ID',
    'P:Viaero Phase', 'P:Viaero Project Type', 'P:Cluster ID',
    'P:FWA (Existing)', 'P:FWA (Scope)', 'P:FWA (Final)',
    'P:Mobility (Existing)', 'P:Mobility (Scope)', 'P:Mobility (Final)',
    'M:Market', 'P:Project Class', 'P:Project Status'
]

milestone_cols = [col for col in df.columns if col.startswith('V:(')]
df_unpivoted = df.melt(id_vars=id_vars, value_vars=milestone_cols, var_name='Milestone', value_name='Status')

# --- Step 4: Extract required columns from unpivoted data ---
def extract_f_a(milestone_str):
    match = re.search(r'V:\((F|A)', milestone_str)
    return 'Forecast' if match and match.group(1) == 'F' else 'Actual'

milestone_mapping = {
    'Site Audit Walk Package Received-Finish': ('Site Audit Walk Package Received-Finish', 'Pre-Con - Site Walk'),
    'Ground Cabling BOM Received-Finish': ('Ground Cabling BOM Received-Finish\n Tower Cabling BOM Received-Finish', 'Pre-Con - Cable BOM and LE'),
    'Tower Cabling BOM Received-Finish': ('Ground Cabling BOM Received-Finish\n Tower Cabling BOM Received-Finish', 'Pre-Con - Cable BOM and LE - Tower'),
    '100% Construction Drawing Received-Finish': ('100% Construction Drawing Received-Finish', 'Pre-Con - Final Drawings'),
    'Billing Milestone 1 Complete-Finish': ('Billing Milestone 1 Complete', 'Pre-Con - Ms1 Rev Rec'),
    'Viaero Ground NTP Received-Finish': ('Viaero Ground NTP Received-Finish', 'Ground NTP'),
    'Ground Construction Complete-Finish': ('Ground Construction Complete-Finish', 'BBU - Ground Install (sites)'),
    'Billing Milestone 2 Complete-Finish': ('Billing Milestone 2 Complete', 'BBU - MS2 Rev Rec'),
    'Viaero Tower NTP Received-Finish': ('Viaero Tower NTP Received-Finish', 'Tower NTP'),
    'Tower Construction Start-Finish': ('Tower Construction Start', 'RRH - Tower CxS'),
    'Tower Installation Complete-Finish': ('Tower Installation Complete', 'RRH - Tower CxC'),
    'Billing Milestone 3 Complete-Finish': ('Billing Milestone 3 Complete', 'MS3 Rev Rec'),
    'Billing Milestone 4 Complete-Finish': ('Billing Milestone 4 Complete', 'MS4 Rev Rec'),
    'De-installed Equipment Return Completed-Finish': ('De-installed Equipment Return Completed', 'Cx Decom'),
    'Site Acceptance-Finish': ('Site Acceptance', 'MS5 - Final Site Acceptance'),
    'Billing Milestone 5 Complete-Finish': ('Billing Milestone 5 Complete', 'MS5 - Final Site Acceptance Rev Rec'),
    'SSV Submitted to Customer FWA-Finish': ('SSV Submitted to Customer FWA-Finish', 'MS4 - SSV Submitted - FWA'),
    'SSV Submitted to Customer Mobility-Finish': ('SSV Submitted to Customer Mobility-Finish', 'MS4 - SSV Submitted')
}

def extract_names(milestone_str):
    match = re.search(r'V:\((?:F|A) \d{4}\) (.+)', milestone_str)
    if match:
        milestone_name = match.group(1).strip()
    else:
        match = re.search(r'V:\((?:F|A)\) (.+)', milestone_str)
        if match:
            milestone_name = match.group(1).strip()
        else:
            milestone_name = milestone_str
    
    return milestone_mapping.get(milestone_name, (milestone_name, milestone_name))

df_unpivoted['F/A'] = df_unpivoted['Milestone'].apply(extract_f_a)
df_unpivoted[['Task Name', 'New name']] = df_unpivoted['Milestone'].apply(lambda x: pd.Series(extract_names(x)))
df_unpivoted['Weekly'] = df_unpivoted['New name']

# --- Step 5: Prepare data for weekly and monthly reports ---
df_unpivoted['Status'] = pd.to_datetime(df_unpivoted['Status'], errors='coerce')
df_unpivoted = df_unpivoted[df_unpivoted['Status'].dt.year >= 2025]
df_unpivoted['Milestone_Count'] = 1
df_unpivoted['Week Label'] = 'Week ' + df_unpivoted['Status'].dt.isocalendar().week.fillna(0).astype(int).astype(str).replace('0', 'No Date')
df_unpivoted['Month'] = df_unpivoted['Status'].dt.strftime('%B %Y').fillna('No Date')
df_unpivoted['Milestone_Count'] = df_unpivoted['Milestone_Count'].fillna(0)

# ----------------------------------------------------------------------------------------------------------------------
## Step 6: Create weekly and monthly reports using pivot tables (UPDATED)
# ----------------------------------------------------------------------------------------------------------------------
def sort_monthly_columns(df_pivot):
    """Sorts monthly columns in chronological order."""
    cols = [col for col in df_pivot.columns if col != 'No Date']
    sorted_cols = sorted(cols, key=lambda x: datetime.strptime(x, '%B %Y'))
    if 'No Date' in df_pivot.columns:
        sorted_cols.append('No Date')
    return df_pivot.reindex(columns=sorted_cols)

def sort_weekly_columns(df_pivot):
    """Sorts weekly columns in chronological order."""
    cols = [col for col in df_pivot.columns if 'No Date' not in col]
    sorted_cols = sorted(cols, key=lambda x: datetime.strptime(f'1 {x[0]} {x[1].replace("Week ", "")}', '%d %B %Y Week %W'))
    if ('No Date', 'No Date') in df_pivot.columns:
        sorted_cols.append(('No Date', 'No Date'))
    return df_pivot.reindex(columns=sorted_cols)

def add_cumulative_rows(df_report):
    df_cumulative = pd.DataFrame(index=df_report.index, columns=df_report.columns).fillna(0)
    for index, row in df_report.iterrows():
        cumulative_row = np.cumsum(row.values)
        df_cumulative.loc[index] = cumulative_row

    df_cumulative.index = pd.MultiIndex.from_tuples(
        [(f"{idx[0]} (Cumulative)", idx[1], idx[2], idx[3]) for idx in df_cumulative.index],
        names=['Weekly', 'F/A', 'Task Name', 'Milestone']
    )
    
    final_df = pd.concat([df_report, df_cumulative]).sort_index()
    return final_df.sort_index(level=['Weekly', 'F/A'], sort_remaining=False)


# Create a complete index for all possible milestone combinations to prevent rows from disappearing
complete_index = pd.MultiIndex.from_product(
    [
        df_unpivoted['Weekly'].unique(),
        df_unpivoted['F/A'].unique(),
        df_unpivoted['Task Name'].unique(),
        df_unpivoted['Milestone'].unique()
    ],
    names=['Weekly', 'F/A', 'Task Name', 'Milestone']
)

# Weekly Report
weekly_pivot = pd.pivot_table(
    df_unpivoted,
    values='Milestone_Count',
    index=['Weekly', 'F/A', 'Task Name', 'Milestone'],
    columns=['Month', 'Week Label'],
    aggfunc='sum',
    fill_value=0
).reindex(complete_index, fill_value=0) # Reindex with the complete index

all_years = sorted(df_unpivoted['Status'].dt.year.dropna().unique())
all_week_cols = []
for year in all_years:
    for week in range(1, 54):
        try:
            date_for_week = datetime.strptime(f'{year}-W{week}-1', "%Y-W%W-%w")
            month_label = date_for_week.strftime('%B %Y')
            week_label = f'Week {week}'
            all_week_cols.append((month_label, week_label))
        except ValueError:
            continue

current_cols = set(weekly_pivot.columns)
missing_cols = [col for col in all_week_cols if col not in current_cols]
for col in missing_cols:
    weekly_pivot[col] = 0

final_weekly_report = sort_weekly_columns(weekly_pivot)

# Monthly Report
monthly_pivot = pd.pivot_table(
    df_unpivoted,
    values='Milestone_Count',
    index=['Weekly', 'F/A', 'Task Name', 'Milestone'],
    columns=['Month'],
    aggfunc='sum',
    fill_value=0
).reindex(complete_index, fill_value=0) # Reindex with the complete index

final_monthly_report = sort_monthly_columns(monthly_pivot)

# ----------------------------------------------------------------------------------------------------------------------
## Step 7: Write reports to multi-sheet Excel file (UNCHANGED BUT INCLUDED FOR COMPLETENESS)
# ----------------------------------------------------------------------------------------------------------------------
today = datetime.today()
output_filename = r"Viaero_BMS_ProgressTracker_" + today.strftime("%m.%d.%y") + "_OV MS rev1.xlsx"
try:
    with pd.ExcelWriter(output_filename, engine='openpyxl') as writer:
        final_weekly_report.to_excel(writer, sheet_name='Weekly Report')
        final_monthly_report.to_excel(writer, sheet_name='Monthly Report')
    print(f"Report saved successfully to {output_filename}")
except Exception as e:
    print(f"Error writing to Excel file: {e}")

# ----------------------------------------------------------------------------------------------------------------------
## Step 8: Pass a DataFrame back to Alteryx (UNCHANGED BUT INCLUDED FOR COMPLETENESS)
# ----------------------------------------------------------------------------------------------------------------------
final_weekly_report_flat = final_weekly_report.reset_index()
new_columns_weekly = ['Weekly', 'F/A', 'Task Name', 'Milestone'] + [f"{col[0]} - {col[1]}" for col in final_weekly_report.columns]
final_weekly_report_flat.columns = new_columns_weekly

final_monthly_report_flat = final_monthly_report.reset_index()
new_columns_monthly = ['Weekly', 'F/A', 'Task Name', 'Milestone'] + [col for col in final_monthly_report.columns]
final_monthly_report_flat.columns = new_columns_monthly

Alteryx.write(final_weekly_report_flat, 1)
Alteryx.write(final_monthly_report_flat, 2)

Error:
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-3-f8bf9768e589> in <module>
    165     weekly_pivot[col] = 0
    166 
--> 167 final_weekly_report = sort_weekly_columns(weekly_pivot)
    168 
    169 # Monthly Report

<ipython-input-3-f8bf9768e589> in sort_weekly_columns(df_pivot)
    107     """Sorts weekly columns in chronological order."""
    108     cols = [col for col in df_pivot.columns if 'No Date' not in col]
--> 109     sorted_cols = sorted(cols, key=lambda x: datetime.strptime(f'1 {x[0]} {x[1].replace("Week ", "")}', '%d %B %Y Week %W'))
    110     if ('No Date', 'No Date') in df_pivot.columns:
    111         sorted_cols.append(('No Date', 'No Date'))

<ipython-input-3-f8bf9768e589> in <lambda>(x)
    107     """Sorts weekly columns in chronological order."""
    108     cols = [col for col in df_pivot.columns if 'No Date' not in col]
--> 109     sorted_cols = sorted(cols, key=lambda x: datetime.strptime(f'1 {x[0]} {x[1].replace("Week ", "")}', '%d %B %Y Week %W'))
    110     if ('No Date', 'No Date') in df_pivot.columns:
    111         sorted_cols.append(('No Date', 'No Date'))

c:\users\l5.lopez\appdata\local\alteryx\bin\miniconda3\envs\designerbasetools_venv\lib\_strptime.py in _strptime_datetime(cls, data_string, format)
    566     """Return a class cls instance based on the input string and the
    567     format string."""
--> 568     tt, fraction, gmtoff_fraction = _strptime(data_string, format)
    569     tzname, gmtoff = tt[-2:]
    570     args = tt[:6] + (fraction,)

c:\users\l5.lopez\appdata\local\alteryx\bin\miniconda3\envs\designerbasetools_venv\lib\_strptime.py in _strptime(data_string, format)
    347     found = format_regex.match(data_string)
    348     if not found:
--> 349         raise ValueError("time data %r does not match format %r" %
    350                          (data_string, format))
    351     if len(data_string) != found.end():

ValueError: time data '1 April 2025 14' does not match format '%d %B %Y Week %W'





